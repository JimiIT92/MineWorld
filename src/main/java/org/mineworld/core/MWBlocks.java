package org.mineworld.core;

import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.flag.FeatureFlags;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.grower.*;
import net.minecraft.world.level.block.state.properties.BlockSetType;
import net.minecraft.world.level.block.state.properties.WoodType;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.RegistryObject;
import org.mineworld.MineWorld;
import org.mineworld.block.*;
import org.mineworld.block.weathering.*;
import org.mineworld.entity.MWPrimedTnt;
import org.mineworld.helper.PropertyHelper;
import org.mineworld.helper.RegisterHelper;

/**
 * {@link MineWorld MineWorld} {@link Block blocks}
 */
public final class MWBlocks {

    public static final RegistryObject<Block> SILVER_ORE = RegisterHelper.registerOverworldOreBlock("silver_ore", false);
    public static final RegistryObject<Block> DEEPSLATE_SILVER_ORE = RegisterHelper.registerOverworldOreBlock("deepslate_silver_ore", true);
    public static final RegistryObject<Block> ALUMINUM_ORE = RegisterHelper.registerOverworldOreBlock("aluminum_ore", false);
    public static final RegistryObject<Block> DEEPSLATE_ALUMINUM_ORE = RegisterHelper.registerOverworldOreBlock("deepslate_aluminum_ore", true);
    public static final RegistryObject<Block> RUBY_ORE = RegisterHelper.registerOverworldOreBlock("ruby_ore", false);
    public static final RegistryObject<Block> DEEPSLATE_RUBY_ORE = RegisterHelper.registerOverworldOreBlock("deepslate_ruby_ore", true);
    public static final RegistryObject<Block> SAPPHIRE_ORE = RegisterHelper.registerOverworldOreBlock("sapphire_ore", false);
    public static final RegistryObject<Block> DEEPSLATE_SAPPHIRE_ORE = RegisterHelper.registerOverworldOreBlock("deepslate_sapphire_ore", true);
    public static final RegistryObject<Block> PYRITE_ORE = RegisterHelper.registerNetherOreBlock("pyrite_ore");
    public static final RegistryObject<Block> RAW_SILVER_BLOCK = RegisterHelper.registerRawOreBlock("raw_silver_block", MWColors.RAW_SILVER.toMaterialColor());
    public static final RegistryObject<Block> RAW_ALUMINUM_BLOCK = RegisterHelper.registerRawOreBlock("raw_aluminum_block", MWColors.RAW_ALUMINUM.toMaterialColor());
    public static final RegistryObject<Block> RAW_BRONZE_BLOCK = RegisterHelper.registerRawOreBlock("raw_bronze_block", MWColors.RAW_BRONZE.toMaterialColor());
    public static final RegistryObject<Block> SILVER_BLOCK = RegisterHelper.registerMetalOreStorageBlock("silver_block", MWColors.SILVER.toMaterialColor());
    public static final RegistryObject<Block> ALUMINUM_BLOCK = RegisterHelper.registerMetalOreStorageBlock("aluminum_block", MWColors.ALUMINUM.toMaterialColor());
    public static final RegistryObject<Block> BRONZE_BLOCK = RegisterHelper.registerBlock("bronze_block", () -> PropertyHelper.basicBlockProperties(Material.METAL, MWColors.BRONZE.toMaterialColor(),3.0F, 6.0F, true, SoundType.COPPER));
    public static final RegistryObject<Block> RUBY_BLOCK = RegisterHelper.registerMetalOreStorageBlock("ruby_block", MWColors.RUBY.toMaterialColor());
    public static final RegistryObject<Block> SAPPHIRE_BLOCK = RegisterHelper.registerMetalOreStorageBlock("sapphire_block", MWColors.SAPPHIRE.toMaterialColor());
    public static final RegistryObject<Block> PYRITE_BLOCK = RegisterHelper.registerFuelBlock("pyrite_block", MWColors.PYRITE.toMaterialColor(), 1200);
    public static final RegistryObject<Block> MARBLE = RegisterHelper.registerBlock("marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MWColors.MARBLE.toMaterialColor()));
    public static final RegistryObject<Block> MARBLE_STAIRS = RegisterHelper.registerStair("marble_stairs", () -> MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> MARBLE_SLAB = RegisterHelper.registerSlab("marble_slab", MARBLE);
    public static final RegistryObject<Block> MARBLE_WALL = RegisterHelper.registerWall("marble_wall", MARBLE);
    public static final RegistryObject<Block> MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("marble_pressure_plate", false, MaterialColor.COLOR_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> MARBLE_BUTTON = RegisterHelper.registerButton("marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MARBLE_PEBBLE = RegisterHelper.registerPebble("marble_pebble", MARBLE);
    public static final RegistryObject<Block> WHITE_MARBLE = RegisterHelper.registerBlock("white_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_WHITE));
    public static final RegistryObject<Block> WHITE_MARBLE_STAIRS = RegisterHelper.registerStair("white_marble_stairs", () -> WHITE_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> WHITE_MARBLE_SLAB = RegisterHelper.registerSlab("white_marble_slab", WHITE_MARBLE);
    public static final RegistryObject<Block> WHITE_MARBLE_WALL = RegisterHelper.registerWall("white_marble_wall", WHITE_MARBLE);
    public static final RegistryObject<Block> WHITE_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("white_marble_pressure_plate", false, MaterialColor.TERRACOTTA_WHITE, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_MARBLE_BUTTON = RegisterHelper.registerButton("white_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_MARBLE_PEBBLE = RegisterHelper.registerPebble("white_marble_pebble", WHITE_MARBLE);
    public static final RegistryObject<Block> ORANGE_MARBLE = RegisterHelper.registerBlock("orange_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_ORANGE));
    public static final RegistryObject<Block> ORANGE_MARBLE_STAIRS = RegisterHelper.registerStair("orange_marble_stairs", () -> ORANGE_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> ORANGE_MARBLE_SLAB = RegisterHelper.registerSlab("orange_marble_slab", ORANGE_MARBLE);
    public static final RegistryObject<Block> ORANGE_MARBLE_WALL = RegisterHelper.registerWall("orange_marble_wall", ORANGE_MARBLE);
    public static final RegistryObject<Block> ORANGE_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("orange_marble_pressure_plate", false, MaterialColor.TERRACOTTA_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_MARBLE_BUTTON = RegisterHelper.registerButton("orange_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_MARBLE_PEBBLE = RegisterHelper.registerPebble("orange_marble_pebble", ORANGE_MARBLE);
    public static final RegistryObject<Block> MAGENTA_MARBLE = RegisterHelper.registerBlock("magenta_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_MAGENTA));
    public static final RegistryObject<Block> MAGENTA_MARBLE_STAIRS = RegisterHelper.registerStair("magenta_marble_stairs", () -> MAGENTA_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> MAGENTA_MARBLE_SLAB = RegisterHelper.registerSlab("magenta_marble_slab", MAGENTA_MARBLE);
    public static final RegistryObject<Block> MAGENTA_MARBLE_WALL = RegisterHelper.registerWall("magenta_marble_wall", MAGENTA_MARBLE);
    public static final RegistryObject<Block> MAGENTA_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("magenta_marble_pressure_plate", false, MaterialColor.TERRACOTTA_MAGENTA, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_MARBLE_BUTTON = RegisterHelper.registerButton("magenta_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_MARBLE_PEBBLE = RegisterHelper.registerPebble("magenta_marble_pebble", MAGENTA_MARBLE);
    public static final RegistryObject<Block> LIGHT_BLUE_MARBLE = RegisterHelper.registerBlock("light_blue_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_LIGHT_BLUE));
    public static final RegistryObject<Block> LIGHT_BLUE_MARBLE_STAIRS = RegisterHelper.registerStair("light_blue_marble_stairs", () -> LIGHT_BLUE_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> LIGHT_BLUE_MARBLE_SLAB = RegisterHelper.registerSlab("light_blue_marble_slab", LIGHT_BLUE_MARBLE);
    public static final RegistryObject<Block> LIGHT_BLUE_MARBLE_WALL = RegisterHelper.registerWall("light_blue_marble_wall", LIGHT_BLUE_MARBLE);
    public static final RegistryObject<Block> LIGHT_BLUE_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_blue_marble_pressure_plate", false, MaterialColor.TERRACOTTA_LIGHT_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_MARBLE_BUTTON = RegisterHelper.registerButton("light_blue_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_MARBLE_PEBBLE = RegisterHelper.registerPebble("light_blue_marble_pebble", LIGHT_BLUE_MARBLE);
    public static final RegistryObject<Block> YELLOW_MARBLE = RegisterHelper.registerBlock("yellow_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_YELLOW));
    public static final RegistryObject<Block> YELLOW_MARBLE_STAIRS = RegisterHelper.registerStair("yellow_marble_stairs", () -> YELLOW_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> YELLOW_MARBLE_SLAB = RegisterHelper.registerSlab("yellow_marble_slab", YELLOW_MARBLE);
    public static final RegistryObject<Block> YELLOW_MARBLE_WALL = RegisterHelper.registerWall("yellow_marble_wall", YELLOW_MARBLE);
    public static final RegistryObject<Block> YELLOW_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("yellow_marble_pressure_plate", false, MaterialColor.TERRACOTTA_YELLOW, BlockSetType.STONE);
    public static final RegistryObject<Block> YELLOW_MARBLE_BUTTON = RegisterHelper.registerButton("yellow_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_MARBLE = RegisterHelper.registerBlock("lime_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_LIGHT_GREEN));
    public static final RegistryObject<Block> YELLOW_MARBLE_PEBBLE = RegisterHelper.registerPebble("yellow_marble_pebble", YELLOW_MARBLE);
    public static final RegistryObject<Block> LIME_MARBLE_STAIRS = RegisterHelper.registerStair("lime_marble_stairs", () -> LIME_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> LIME_MARBLE_SLAB = RegisterHelper.registerSlab("lime_marble_slab", LIME_MARBLE);
    public static final RegistryObject<Block> LIME_MARBLE_WALL = RegisterHelper.registerWall("lime_marble_wall", LIME_MARBLE);
    public static final RegistryObject<Block> LIME_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("lime_marble_pressure_plate", false, MaterialColor.TERRACOTTA_LIGHT_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_MARBLE_BUTTON = RegisterHelper.registerButton("lime_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_MARBLE_PEBBLE = RegisterHelper.registerPebble("lime_marble_pebble", LIME_MARBLE);
    public static final RegistryObject<Block> PINK_MARBLE = RegisterHelper.registerBlock("pink_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_PINK));
    public static final RegistryObject<Block> PINK_MARBLE_STAIRS = RegisterHelper.registerStair("pink_marble_stairs", () -> PINK_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> PINK_MARBLE_SLAB = RegisterHelper.registerSlab("pink_marble_slab", PINK_MARBLE);
    public static final RegistryObject<Block> PINK_MARBLE_WALL = RegisterHelper.registerWall("pink_marble_wall", PINK_MARBLE);
    public static final RegistryObject<Block> PINK_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("pink_marble_pressure_plate", false, MaterialColor.TERRACOTTA_PINK, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_MARBLE_BUTTON = RegisterHelper.registerButton("pink_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_MARBLE_PEBBLE = RegisterHelper.registerPebble("pink_marble_pebble", PINK_MARBLE);
    public static final RegistryObject<Block> GRAY_MARBLE = RegisterHelper.registerBlock("gray_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_GRAY));
    public static final RegistryObject<Block> GRAY_MARBLE_STAIRS = RegisterHelper.registerStair("gray_marble_stairs", () -> GRAY_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> GRAY_MARBLE_SLAB = RegisterHelper.registerSlab("gray_marble_slab", GRAY_MARBLE);
    public static final RegistryObject<Block> GRAY_MARBLE_WALL = RegisterHelper.registerWall("gray_marble_wall", GRAY_MARBLE);
    public static final RegistryObject<Block> GRAY_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("gray_marble_pressure_plate", false, MaterialColor.TERRACOTTA_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_MARBLE_BUTTON = RegisterHelper.registerButton("gray_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_MARBLE_PEBBLE = RegisterHelper.registerPebble("gray_marble_pebble", GRAY_MARBLE);
    public static final RegistryObject<Block> LIGHT_GRAY_MARBLE = RegisterHelper.registerBlock("light_gray_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_LIGHT_GRAY));
    public static final RegistryObject<Block> LIGHT_GRAY_MARBLE_STAIRS = RegisterHelper.registerStair("light_gray_marble_stairs", () -> LIGHT_GRAY_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> LIGHT_GRAY_MARBLE_SLAB = RegisterHelper.registerSlab("light_gray_marble_slab", LIGHT_GRAY_MARBLE);
    public static final RegistryObject<Block> LIGHT_GRAY_MARBLE_WALL = RegisterHelper.registerWall("light_gray_marble_wall", LIGHT_GRAY_MARBLE);
    public static final RegistryObject<Block> LIGHT_GRAY_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_gray_marble_pressure_plate", false, MaterialColor.TERRACOTTA_LIGHT_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_MARBLE_BUTTON = RegisterHelper.registerButton("light_gray_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_MARBLE_PEBBLE = RegisterHelper.registerPebble("light_gray_marble_pebble", LIGHT_GRAY_MARBLE);
    public static final RegistryObject<Block> CYAN_MARBLE = RegisterHelper.registerBlock("cyan_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_CYAN));
    public static final RegistryObject<Block> CYAN_MARBLE_STAIRS = RegisterHelper.registerStair("cyan_marble_stairs", () -> CYAN_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> CYAN_MARBLE_SLAB = RegisterHelper.registerSlab("cyan_marble_slab", CYAN_MARBLE);
    public static final RegistryObject<Block> CYAN_MARBLE_WALL = RegisterHelper.registerWall("cyan_marble_wall", CYAN_MARBLE);
    public static final RegistryObject<Block> CYAN_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("cyan_marble_pressure_plate", false, MaterialColor.TERRACOTTA_CYAN, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_MARBLE_BUTTON = RegisterHelper.registerButton("cyan_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_MARBLE_PEBBLE = RegisterHelper.registerPebble("cyan_marble_pebble", CYAN_MARBLE);
    public static final RegistryObject<Block> PURPLE_MARBLE = RegisterHelper.registerBlock("purple_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_PURPLE));
    public static final RegistryObject<Block> PURPLE_MARBLE_STAIRS = RegisterHelper.registerStair("purple_marble_stairs", () -> PURPLE_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> PURPLE_MARBLE_SLAB = RegisterHelper.registerSlab("purple_marble_slab", PURPLE_MARBLE);
    public static final RegistryObject<Block> PURPLE_MARBLE_WALL = RegisterHelper.registerWall("purple_marble_wall", PURPLE_MARBLE);
    public static final RegistryObject<Block> PURPLE_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("purple_marble_pressure_plate", false, MaterialColor.TERRACOTTA_PURPLE, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_MARBLE_BUTTON = RegisterHelper.registerButton("purple_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_MARBLE_PEBBLE = RegisterHelper.registerPebble("purple_marble_pebble", PURPLE_MARBLE);
    public static final RegistryObject<Block> BLUE_MARBLE = RegisterHelper.registerBlock("blue_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_BLUE));
    public static final RegistryObject<Block> BLUE_MARBLE_STAIRS = RegisterHelper.registerStair("blue_marble_stairs", () -> BLUE_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> BLUE_MARBLE_SLAB = RegisterHelper.registerSlab("blue_marble_slab", BLUE_MARBLE);
    public static final RegistryObject<Block> BLUE_MARBLE_WALL = RegisterHelper.registerWall("blue_marble_wall", BLUE_MARBLE);
    public static final RegistryObject<Block> BLUE_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("blue_marble_pressure_plate", false, MaterialColor.TERRACOTTA_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_MARBLE_BUTTON = RegisterHelper.registerButton("blue_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_MARBLE_PEBBLE = RegisterHelper.registerPebble("blue_marble_pebble", BLUE_MARBLE);
    public static final RegistryObject<Block> BROWN_MARBLE = RegisterHelper.registerBlock("brown_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_BROWN));
    public static final RegistryObject<Block> BROWN_MARBLE_STAIRS = RegisterHelper.registerStair("brown_marble_stairs", () -> BROWN_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> BROWN_MARBLE_SLAB = RegisterHelper.registerSlab("brown_marble_slab", BROWN_MARBLE);
    public static final RegistryObject<Block> BROWN_MARBLE_WALL = RegisterHelper.registerWall("brown_marble_wall", BROWN_MARBLE);
    public static final RegistryObject<Block> BROWN_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("brown_marble_pressure_plate", false, MaterialColor.TERRACOTTA_BROWN, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_MARBLE_BUTTON = RegisterHelper.registerButton("brown_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_MARBLE_PEBBLE = RegisterHelper.registerPebble("brown_marble_pebble", BROWN_MARBLE);
    public static final RegistryObject<Block> GREEN_MARBLE = RegisterHelper.registerBlock("green_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_GREEN));
    public static final RegistryObject<Block> GREEN_MARBLE_STAIRS = RegisterHelper.registerStair("green_marble_stairs", () -> GREEN_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> GREEN_MARBLE_SLAB = RegisterHelper.registerSlab("green_marble_slab", GREEN_MARBLE);
    public static final RegistryObject<Block> GREEN_MARBLE_WALL = RegisterHelper.registerWall("green_marble_wall", GREEN_MARBLE);
    public static final RegistryObject<Block> GREEN_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("green_marble_pressure_plate", false, MaterialColor.TERRACOTTA_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_MARBLE_BUTTON = RegisterHelper.registerButton("green_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_MARBLE_PEBBLE = RegisterHelper.registerPebble("green_marble_pebble", GREEN_MARBLE);
    public static final RegistryObject<Block> RED_MARBLE = RegisterHelper.registerBlock("red_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_RED));
    public static final RegistryObject<Block> RED_MARBLE_STAIRS = RegisterHelper.registerStair("red_marble_stairs", () -> RED_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> RED_MARBLE_SLAB = RegisterHelper.registerSlab("red_marble_slab", RED_MARBLE);
    public static final RegistryObject<Block> RED_MARBLE_WALL = RegisterHelper.registerWall("red_marble_wall", RED_MARBLE);
    public static final RegistryObject<Block> RED_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("red_marble_pressure_plate", false, MaterialColor.TERRACOTTA_RED, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_MARBLE_BUTTON = RegisterHelper.registerButton("red_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_MARBLE_PEBBLE = RegisterHelper.registerPebble("red_marble_pebble", RED_MARBLE);
    public static final RegistryObject<Block> BLACK_MARBLE = RegisterHelper.registerBlock("black_marble", () -> PropertyHelper.copyFromBlock(Blocks.TUFF).color(MaterialColor.TERRACOTTA_BLACK));
    public static final RegistryObject<Block> BLACK_MARBLE_STAIRS = RegisterHelper.registerStair("black_marble_stairs", () -> BLACK_MARBLE.get().defaultBlockState());
    public static final RegistryObject<Block> BLACK_MARBLE_SLAB = RegisterHelper.registerSlab("black_marble_slab", BLACK_MARBLE);
    public static final RegistryObject<Block> BLACK_MARBLE_WALL = RegisterHelper.registerWall("black_marble_wall", BLACK_MARBLE);
    public static final RegistryObject<Block> BLACK_MARBLE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("black_marble_pressure_plate", false, MaterialColor.TERRACOTTA_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_MARBLE_BUTTON = RegisterHelper.registerButton("black_marble_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_MARBLE_PEBBLE = RegisterHelper.registerPebble("black_marble_pebble", BLACK_MARBLE);
    public static final RegistryObject<Block> BLUE_ROSE = RegisterHelper.registerFlower("blue_rose", () -> MobEffects.SATURATION);
    public static final RegistryObject<Block> POTTED_BLUE_ROSE = RegisterHelper.registerFlowerPot("potted_blue_rose", BLUE_ROSE);
    public static final RegistryObject<Block> BLUE_ROSE_BUSH = RegisterHelper.registerTallFlower("blue_rose_bush");
    public static final RegistryObject<Block> POTTED_BLUE_ROSE_BUSH = RegisterHelper.registerFlowerPot("potted_blue_rose_bush", BLUE_ROSE_BUSH);
    public static final RegistryObject<Block> WHITE_ROSE = RegisterHelper.registerFlower("white_rose", () -> MobEffects.HEAL);
    public static final RegistryObject<Block> POTTED_WHITE_ROSE = RegisterHelper.registerFlowerPot("potted_white_rose", WHITE_ROSE);
    public static final RegistryObject<Block> WHITE_ROSE_BUSH = RegisterHelper.registerTallFlower("white_rose_bush");
    public static final RegistryObject<Block> POTTED_WHITE_ROSE_BUSH = RegisterHelper.registerFlowerPot("potted_white_rose_bush", WHITE_ROSE_BUSH);
    public static final RegistryObject<Block> POTTED_MOSS_BLOCK = RegisterHelper.registerFlowerPot("potted_moss_block", () -> Blocks.MOSS_BLOCK);
    public static final RegistryObject<Block> POTTED_OAK_LEAVES = RegisterHelper.registerFlowerPot("potted_oak_leaves", () -> Blocks.OAK_LEAVES);
    public static final RegistryObject<Block> POTTED_SPRUCE_LEAVES = RegisterHelper.registerFlowerPot("potted_spruce_leaves", () -> Blocks.SPRUCE_LEAVES);
    public static final RegistryObject<Block> POTTED_BIRCH_LEAVES = RegisterHelper.registerFlowerPot("potted_birch_leaves", () -> Blocks.BIRCH_LEAVES);
    public static final RegistryObject<Block> POTTED_JUNGLE_LEAVES = RegisterHelper.registerFlowerPot("potted_jungle_leaves", () -> Blocks.JUNGLE_LEAVES);
    public static final RegistryObject<Block> POTTED_ACACIA_LEAVES = RegisterHelper.registerFlowerPot("potted_acacia_leaves", () -> Blocks.ACACIA_LEAVES);
    public static final RegistryObject<Block> POTTED_CHERRY_LEAVES = RegisterHelper.registerFlowerPot("potted_cherry_leaves", () -> Blocks.CHERRY_LEAVES, FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> POTTED_DARK_OAK_LEAVES = RegisterHelper.registerFlowerPot("potted_dark_oak_leaves", () -> Blocks.DARK_OAK_LEAVES);
    public static final RegistryObject<Block> POTTED_MANGROVE_LEAVES = RegisterHelper.registerFlowerPot("potted_mangrove_leaves", () -> Blocks.MANGROVE_LEAVES);
    public static final RegistryObject<Block> POTTED_AZALEA_LEAVES = RegisterHelper.registerFlowerPot("potted_azalea_leaves", () -> Blocks.AZALEA_LEAVES);
    public static final RegistryObject<Block> POTTED_FLOWERING_AZALEA_LEAVES = RegisterHelper.registerFlowerPot("potted_flowering_azalea_leaves", () -> Blocks.FLOWERING_AZALEA_LEAVES);
    public static final RegistryObject<Block> POTTED_MANGROVE_ROOTS = RegisterHelper.registerFlowerPot("potted_mangrove_roots", () -> Blocks.MANGROVE_ROOTS);
    public static final RegistryObject<Block> POTTED_MUDDY_MANGROVE_ROOTS = RegisterHelper.registerFlowerPot("potted_muddy_mangrove_roots", () -> Blocks.MUDDY_MANGROVE_ROOTS);
    public static final RegistryObject<Block> POTTED_MUSHROOM_STEM = RegisterHelper.registerFlowerPot("potted_mushroom_stem", () -> Blocks.MUSHROOM_STEM);
    public static final RegistryObject<Block> POTTED_BROWN_MUSHROOM_BLOCK = RegisterHelper.registerFlowerPot("potted_brown_mushroom_block", () -> Blocks.BROWN_MUSHROOM_BLOCK);
    public static final RegistryObject<Block> POTTED_RED_MUSHROOM_BLOCK = RegisterHelper.registerFlowerPot("potted_red_mushroom_block", () -> Blocks.RED_MUSHROOM_BLOCK);
    public static final RegistryObject<Block> POTTED_NETHER_WART_BLOCK = RegisterHelper.registerFlowerPot("potted_nether_wart_block", () -> Blocks.NETHER_WART_BLOCK);
    public static final RegistryObject<Block> POTTED_WARPED_WART_BLOCK = RegisterHelper.registerFlowerPot("potted_warped_wart_block", () -> Blocks.WARPED_WART_BLOCK);
    public static final RegistryObject<Block> POTTED_SHROOMLIGHT = RegisterHelper.registerLitFlowerPot("potted_shroomlight", () -> Blocks.SHROOMLIGHT, 5);
    public static final RegistryObject<Block> POTTED_GRASS = RegisterHelper.registerFlowerPot("potted_grass", () -> Blocks.GRASS);
    public static final RegistryObject<Block> POTTED_SUGAR_CANE = RegisterHelper.registerFlowerPot("potted_sugar_cane", () -> Blocks.SUGAR_CANE);
    public static final RegistryObject<Block> POTTED_SEAGRASS = RegisterHelper.registerFlowerPot("potted_seagrass", () -> Blocks.SEAGRASS);
    public static final RegistryObject<Block> POTTED_TALL_GRASS = RegisterHelper.registerFlowerPot("potted_tall_grass", () -> Blocks.TALL_GRASS);
    public static final RegistryObject<Block> POTTED_LARGE_FERN = RegisterHelper.registerFlowerPot("potted_large_fern", () -> Blocks.LARGE_FERN);
    public static final RegistryObject<Block> POTTED_SUNFLOWER = RegisterHelper.registerFlowerPot("potted_sunflower", () -> Blocks.SUNFLOWER);
    public static final RegistryObject<Block> POTTED_LILAC = RegisterHelper.registerFlowerPot("potted_lilac", () -> Blocks.LILAC);
    public static final RegistryObject<Block> POTTED_ROSE_BUSH = RegisterHelper.registerFlowerPot("potted_rose_bush", () -> Blocks.ROSE_BUSH);
    public static final RegistryObject<Block> POTTED_PEONY = RegisterHelper.registerFlowerPot("potted_peony", () -> Blocks.PEONY);
    public static final RegistryObject<Block> POTTED_KELP = RegisterHelper.registerFlowerPot("potted_kelp", () -> Blocks.KELP);
    public static final RegistryObject<Block> POTTED_BIG_DRIPLEAF = RegisterHelper.registerFlowerPot("potted_big_dripleaf", () -> Blocks.BIG_DRIPLEAF);
    public static final RegistryObject<Block> POTTED_SMALL_DRIPLEAF = RegisterHelper.registerFlowerPot("potted_small_dripleaf", () -> Blocks.SMALL_DRIPLEAF);
    public static final RegistryObject<Block> POTTED_CHORUS_PLANT = RegisterHelper.registerFlowerPot("potted_chorus_plant", () -> Blocks.CHORUS_PLANT);
    public static final RegistryObject<Block> POTTED_CHORUS_FLOWER = RegisterHelper.registerFlowerPot("potted_chorus_flower", () -> Blocks.CHORUS_FLOWER);
    public static final RegistryObject<Block> POTTED_SWEET_BERRY_BUSH = RegisterHelper.registerFlowerPot("potted_sweet_berry_bush", () -> Blocks.SWEET_BERRY_BUSH);
    public static final RegistryObject<Block> POTTED_CAVE_VINES = RegisterHelper.registerLitFlowerPot("potted_cave_vines", () -> Blocks.CAVE_VINES, 4);
    public static final RegistryObject<Block> POTTED_OCHRE_FROGLIGHT = RegisterHelper.registerLitFlowerPot("potted_ochre_froglight", () -> Blocks.OCHRE_FROGLIGHT, 5);
    public static final RegistryObject<Block> POTTED_VERDANT_FROGLIGHT = RegisterHelper.registerLitFlowerPot("potted_verdant_froglight", () -> Blocks.VERDANT_FROGLIGHT, 5);
    public static final RegistryObject<Block> POTTED_PEARLESCENT_FROGLIGHT = RegisterHelper.registerLitFlowerPot("potted_pearlescent_froglight", () -> Blocks.PEARLESCENT_FROGLIGHT, 5);
    public static final RegistryObject<Block> POTTED_DEAD_TUBE_CORAL_BLOCK = RegisterHelper.registerFlowerPot("potted_dead_tube_coral_block", () -> Blocks.DEAD_TUBE_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_TUBE_CORAL_BLOCK = RegisterHelper.registerCoralFlowerPot("potted_tube_coral_block", POTTED_DEAD_TUBE_CORAL_BLOCK, () -> Blocks.TUBE_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_DEAD_BRAIN_CORAL_BLOCK = RegisterHelper.registerFlowerPot("potted_dead_brain_coral_block", () -> Blocks.DEAD_BRAIN_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_BRAIN_CORAL_BLOCK = RegisterHelper.registerCoralFlowerPot("potted_brain_coral_block", POTTED_DEAD_BRAIN_CORAL_BLOCK, () -> Blocks.BRAIN_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_DEAD_BUBBLE_CORAL_BLOCK = RegisterHelper.registerFlowerPot("potted_dead_bubble_coral_block", () -> Blocks.DEAD_BUBBLE_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_BUBBLE_CORAL_BLOCK = RegisterHelper.registerCoralFlowerPot("potted_bubble_coral_block", POTTED_DEAD_BUBBLE_CORAL_BLOCK, () -> Blocks.BUBBLE_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_DEAD_FIRE_CORAL_BLOCK = RegisterHelper.registerFlowerPot("potted_dead_fire_coral_block", () -> Blocks.DEAD_FIRE_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_FIRE_CORAL_BLOCK = RegisterHelper.registerCoralFlowerPot("potted_fire_coral_block", POTTED_DEAD_FIRE_CORAL_BLOCK, () -> Blocks.FIRE_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_DEAD_HORN_CORAL_BLOCK = RegisterHelper.registerFlowerPot("potted_dead_horn_coral_block", () -> Blocks.DEAD_HORN_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_HORN_CORAL_BLOCK = RegisterHelper.registerCoralFlowerPot("potted_horn_coral_block", POTTED_DEAD_HORN_CORAL_BLOCK, () -> Blocks.HORN_CORAL_BLOCK);
    public static final RegistryObject<Block> POTTED_DEAD_TUBE_CORAL = RegisterHelper.registerFlowerPot("potted_dead_tube_coral", () -> Blocks.DEAD_TUBE_CORAL);
    public static final RegistryObject<Block> POTTED_TUBE_CORAL = RegisterHelper.registerCoralFlowerPot("potted_tube_coral", POTTED_DEAD_TUBE_CORAL, () -> Blocks.TUBE_CORAL);
    public static final RegistryObject<Block> POTTED_DEAD_BRAIN_CORAL = RegisterHelper.registerFlowerPot("potted_dead_brain_coral", () -> Blocks.DEAD_BRAIN_CORAL);
    public static final RegistryObject<Block> POTTED_BRAIN_CORAL = RegisterHelper.registerCoralFlowerPot("potted_brain_coral", POTTED_DEAD_BRAIN_CORAL, () -> Blocks.BRAIN_CORAL);
    public static final RegistryObject<Block> POTTED_DEAD_BUBBLE_CORAL = RegisterHelper.registerFlowerPot("potted_dead_bubble_coral", () -> Blocks.DEAD_BUBBLE_CORAL);
    public static final RegistryObject<Block> POTTED_BUBBLE_CORAL = RegisterHelper.registerCoralFlowerPot("potted_bubble_coral", POTTED_DEAD_BUBBLE_CORAL, () -> Blocks.BUBBLE_CORAL);
    public static final RegistryObject<Block> POTTED_DEAD_FIRE_CORAL = RegisterHelper.registerFlowerPot("potted_dead_fire_coral", () -> Blocks.DEAD_FIRE_CORAL);
    public static final RegistryObject<Block> POTTED_FIRE_CORAL = RegisterHelper.registerCoralFlowerPot("potted_fire_coral", POTTED_DEAD_FIRE_CORAL, () -> Blocks.FIRE_CORAL);
    public static final RegistryObject<Block> POTTED_DEAD_HORN_CORAL = RegisterHelper.registerFlowerPot("potted_dead_horn_coral", () -> Blocks.DEAD_HORN_CORAL);
    public static final RegistryObject<Block> POTTED_HORN_CORAL = RegisterHelper.registerCoralFlowerPot("potted_horn_coral", POTTED_DEAD_HORN_CORAL, () -> Blocks.HORN_CORAL);
    public static final RegistryObject<Block> POTTED_DEAD_TUBE_CORAL_FAN = RegisterHelper.registerFlowerPot("potted_dead_tube_coral_fan", () -> Blocks.DEAD_TUBE_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_TUBE_CORAL_FAN = RegisterHelper.registerCoralFlowerPot("potted_tube_coral_fan", POTTED_DEAD_TUBE_CORAL_FAN, () -> Blocks.TUBE_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_DEAD_BRAIN_CORAL_FAN = RegisterHelper.registerFlowerPot("potted_dead_brain_coral_fan", () -> Blocks.DEAD_BRAIN_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_BRAIN_CORAL_FAN = RegisterHelper.registerCoralFlowerPot("potted_brain_coral_fan", POTTED_DEAD_BRAIN_CORAL_FAN, () -> Blocks.BRAIN_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_DEAD_BUBBLE_CORAL_FAN = RegisterHelper.registerFlowerPot("potted_dead_bubble_coral_fan", () -> Blocks.DEAD_BUBBLE_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_BUBBLE_CORAL_FAN = RegisterHelper.registerCoralFlowerPot("potted_bubble_coral_fan", POTTED_DEAD_BUBBLE_CORAL_FAN, () -> Blocks.BUBBLE_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_DEAD_FIRE_CORAL_FAN = RegisterHelper.registerFlowerPot("potted_dead_fire_coral_fan", () -> Blocks.DEAD_FIRE_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_FIRE_CORAL_FAN = RegisterHelper.registerCoralFlowerPot("potted_fire_coral_fan", POTTED_DEAD_FIRE_CORAL_FAN, () -> Blocks.FIRE_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_DEAD_HORN_CORAL_FAN = RegisterHelper.registerFlowerPot("potted_dead_horn_coral_fan", () -> Blocks.DEAD_HORN_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_HORN_CORAL_FAN = RegisterHelper.registerCoralFlowerPot("potted_horn_coral_fan", POTTED_DEAD_HORN_CORAL_FAN, () -> Blocks.HORN_CORAL_FAN);
    public static final RegistryObject<Block> POTTED_BAMBOO_BLOCK = RegisterHelper.registerFlowerPot("potted_bamboo_block", () -> Blocks.BAMBOO_BLOCK);
    public static final RegistryObject<Block> POTTED_STRIPPED_BAMBOO_BLOCK = RegisterHelper.registerFlowerPot("potted_stripped_bamboo_block", () -> Blocks.STRIPPED_BAMBOO_BLOCK);
    public static final RegistryObject<Block> POTTED_MUD = RegisterHelper.registerFlowerPot("potted_mud", () -> Blocks.MUD);
    public static final RegistryObject<Block> POTTED_CLAY = RegisterHelper.registerFlowerPot("potted_clay", () -> Blocks.CLAY);
    public static final RegistryObject<Block> POTTED_NETHER_WART = RegisterHelper.registerFlowerPot("potted_nether_wart", () -> Blocks.NETHER_WART);
    public static final RegistryObject<Block> POTTED_SEA_PICKLE = RegisterHelper.registerLitFlowerPot("potted_sea_pickle", () -> Blocks.SEA_PICKLE, 1);
    public static final RegistryObject<Block> POTTED_DRIED_KELP_BLOCK = RegisterHelper.registerFlowerPot("potted_dried_kelp_block", () -> Blocks.DRIED_KELP_BLOCK);
    public static final RegistryObject<Block> POTTED_SPONGE = RegisterHelper.registerFlowerPot("potted_sponge", () -> Blocks.SPONGE);
    public static final RegistryObject<Block> POTTED_WET_SPONGE = RegisterHelper.registerFlowerPot("potted_wet_sponge", () -> Blocks.WET_SPONGE);
    public static final RegistryObject<Block> POTTED_MELON = RegisterHelper.registerFlowerPot("potted_melon", () -> Blocks.MELON);
    public static final RegistryObject<Block> POTTED_PUMPKIN = RegisterHelper.registerFlowerPot("potted_pumpkin", () -> Blocks.PUMPKIN);
    public static final RegistryObject<Block> POTTED_HAY_BLOCK = RegisterHelper.registerFlowerPot("potted_hay_block", () -> Blocks.HAY_BLOCK);
    public static final RegistryObject<Block> POTTED_HONEYCOMB_BLOCK = RegisterHelper.registerFlowerPot("potted_honeycomb_block", () -> Blocks.HONEYCOMB_BLOCK);
    public static final RegistryObject<Block> POTTED_HONEY_BLOCK = RegisterHelper.registerFlowerPot("potted_honey_block", () -> Blocks.HONEY_BLOCK);
    public static final RegistryObject<Block> POTTED_SLIME_BLOCK = RegisterHelper.registerFlowerPot("potted_slime_block", () -> Blocks.SLIME_BLOCK);
    public static final RegistryObject<Block> POTTED_SCULK = RegisterHelper.registerFlowerPot("potted_sculk", () -> Blocks.SCULK);
    public static final RegistryObject<Block> POTTED_SNOW_BLOCK = RegisterHelper.registerFlowerPot("potted_snow_block", () -> Blocks.SNOW_BLOCK);
    public static final RegistryObject<Block> CORN = RegisterHelper.registerBlockWithoutBlockItem("corn", CornBlock::new);
    public static final RegistryObject<Block> DISGUISED_GRASS_TNT = RegisterHelper.registerBlock("disguised_grass_tnt", () -> new MWTntBlock(MWPrimedTnt.Type.DISGUISED_GRASS));
    public static final RegistryObject<Block> DISGUISED_DIRT_TNT = RegisterHelper.registerBlock("disguised_dirt_tnt", () -> new MWTntBlock(MWPrimedTnt.Type.DISGUISED_DIRT));
    public static final RegistryObject<Block> DISGUISED_SAND_TNT = RegisterHelper.registerBlock("disguised_sand_tnt", () -> new MWFallableTntBlock(MWPrimedTnt.Type.DISGUISED_SAND, 14406560));
    public static final RegistryObject<Block> DISGUISED_RED_SAND_TNT = RegisterHelper.registerBlock("disguised_red_sand_tnt", () -> new MWFallableTntBlock(MWPrimedTnt.Type.DISGUISED_RED_SAND, 11098145));
    public static final RegistryObject<Block> DISGUISED_STONE_TNT = RegisterHelper.registerBlock("disguised_stone_tnt", () -> new MWTntBlock(MWPrimedTnt.Type.DISGUISED_STONE));
    public static final RegistryObject<Block> DISGUISED_CAKE_TNT = RegisterHelper.registerBlock("disguised_cake_tnt", () -> new MWTntBlock(MWPrimedTnt.Type.DISGUISED_CAKE));
    public static final RegistryObject<Block> MEGA_TNT = RegisterHelper.registerBlock("mega_tnt", () -> new MWTntBlock(MWPrimedTnt.Type.MEGA));
    public static final RegistryObject<Block> SUPER_TNT = RegisterHelper.registerBlock("super_tnt", () -> new MWTntBlock(MWPrimedTnt.Type.SUPER));
    public static final RegistryObject<Block> HYPER_TNT = RegisterHelper.registerBlock("hyper_tnt", () -> new MWTntBlock(MWPrimedTnt.Type.HYPER));
    public static final RegistryObject<Block> DAYLIGHT_LAMP = RegisterHelper.registerBlock("daylight_lamp", () -> new DaylightLampBlock());
    public static final RegistryObject<Block> CHARCOAL_BLOCK = RegisterHelper.registerFuelBlock("charcoal_block", MWColors.CHARCOAL.toMaterialColor(), 800);
    public static final RegistryObject<Block> IRON_STAIRS = RegisterHelper.registerStair("iron_stairs", Blocks.IRON_BLOCK::defaultBlockState);
    public static final RegistryObject<Block> IRON_SLAB = RegisterHelper.registerSlab("iron_slab", () -> Blocks.IRON_BLOCK);
    public static final RegistryObject<Block> IRON_CAGE = RegisterHelper.registerCage("iron_cage", () -> Blocks.IRON_BLOCK);
    public static final RegistryObject<Block> CUT_IRON = RegisterHelper.registerBlock("cut_iron", () -> PropertyHelper.copyFromBlock(Blocks.IRON_BLOCK));
    public static final RegistryObject<Block> CUT_IRON_STAIRS = RegisterHelper.registerStair("cut_iron_stairs", () -> CUT_IRON.get().defaultBlockState());
    public static final RegistryObject<Block> CUT_IRON_SLAB = RegisterHelper.registerSlab("cut_iron_slab", CUT_IRON);
    public static final RegistryObject<Block> CUT_IRON_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("cut_iron_pressure_plate", 15, MaterialColor.METAL, BlockSetType.IRON);
    public static final RegistryObject<Block> GOLDEN_STAIRS = RegisterHelper.registerStair("golden_stairs", Blocks.GOLD_BLOCK::defaultBlockState);
    public static final RegistryObject<Block> GOLDEN_SLAB = RegisterHelper.registerSlab("golden_slab", () -> Blocks.GOLD_BLOCK);
    public static final RegistryObject<Block> GOLDEN_DOOR = RegisterHelper.registerDoor("golden_door", true, BlockSetType.GOLD);
    public static final RegistryObject<Block> GOLDEN_TRAPDOOR = RegisterHelper.registerTrapdoor("golden_trapdoor", true, BlockSetType.GOLD);
    public static final RegistryObject<Block> GOLDEN_CHAIN = RegisterHelper.registerChain("golden_chain");
    public static final RegistryObject<Block> GOLDEN_LANTERN = RegisterHelper.registerLantern("golden_lantern", false);
    public static final RegistryObject<Block> GOLDEN_SOUL_LANTERN = RegisterHelper.registerLantern("golden_soul_lantern", true);
    public static final RegistryObject<Block> GOLD_BARS = RegisterHelper.registerBars("gold_bars");
    public static final RegistryObject<Block> GOLDEN_CAGE = RegisterHelper.registerCage("golden_cage", () -> Blocks.GOLD_BLOCK);
    public static final RegistryObject<Block> CUT_GOLD = RegisterHelper.registerBlock("cut_gold", () -> PropertyHelper.copyFromBlock(Blocks.GOLD_BLOCK));
    public static final RegistryObject<Block> CUT_GOLDEN_STAIRS = RegisterHelper.registerStair("cut_golden_stairs", () -> CUT_GOLD.get().defaultBlockState());
    public static final RegistryObject<Block> CUT_GOLDEN_SLAB = RegisterHelper.registerSlab("cut_golden_slab", CUT_GOLD);
    public static final RegistryObject<Block> CUT_GOLDEN_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("cut_golden_pressure_plate", 15, MaterialColor.GOLD, BlockSetType.GOLD);
    public static final RegistryObject<Block> OXIDIZED_COPPER_STAIRS = RegisterHelper.registerBlock("oxidized_copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.OXIDIZED, Blocks.OXIDIZED_COPPER.defaultBlockState()));
    public static final RegistryObject<Block> WEATHERED_COPPER_STAIRS = RegisterHelper.registerBlock("weathered_copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.WEATHERED, Blocks.WEATHERED_COPPER.defaultBlockState()));
    public static final RegistryObject<Block> EXPOSED_COPPER_STAIRS = RegisterHelper.registerBlock("exposed_copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.EXPOSED, Blocks.EXPOSED_COPPER.defaultBlockState()));
    public static final RegistryObject<Block> COPPER_STAIRS = RegisterHelper.registerBlock("copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.UNAFFECTED, Blocks.COPPER_BLOCK.defaultBlockState()));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_STAIRS = RegisterHelper.registerBlock("waxed_oxidized_copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.OXIDIZED, Blocks.WAXED_OXIDIZED_COPPER.defaultBlockState()));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_STAIRS = RegisterHelper.registerBlock("waxed_weathered_copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.WEATHERED, Blocks.WAXED_WEATHERED_COPPER.defaultBlockState()));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_STAIRS = RegisterHelper.registerBlock("waxed_exposed_copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.EXPOSED, Blocks.WAXED_EXPOSED_COPPER.defaultBlockState()));
    public static final RegistryObject<Block> WAXED_COPPER_STAIRS = RegisterHelper.registerBlock("waxed_copper_stairs",
            () -> new MWWeatheringCopperStairBlock(WeatheringCopper.WeatherState.UNAFFECTED, Blocks.WAXED_COPPER_BLOCK.defaultBlockState()));
    public static final RegistryObject<Block> OXIDIZED_COPPER_SLAB = RegisterHelper.registerBlock("oxidized_copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.OXIDIZED, PropertyHelper.copyFromBlock(Blocks.OXIDIZED_CUT_COPPER)));
    public static final RegistryObject<Block> WEATHERED_COPPER_SLAB = RegisterHelper.registerBlock("weathered_copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.WEATHERED, PropertyHelper.copyFromBlock(Blocks.WEATHERED_CUT_COPPER)));
    public static final RegistryObject<Block> EXPOSED_COPPER_SLAB = RegisterHelper.registerBlock("exposed_copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.EXPOSED, PropertyHelper.copyFromBlock(Blocks.EXPOSED_CUT_COPPER)));
    public static final RegistryObject<Block> COPPER_SLAB = RegisterHelper.registerBlock("copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.UNAFFECTED, PropertyHelper.copyFromBlock(Blocks.CUT_COPPER_SLAB)));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_SLAB = RegisterHelper.registerBlock("waxed_oxidized_copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.OXIDIZED, PropertyHelper.copyFromBlock(Blocks.WAXED_OXIDIZED_CUT_COPPER)));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_SLAB = RegisterHelper.registerBlock("waxed_weathered_copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.WEATHERED, PropertyHelper.copyFromBlock(Blocks.WAXED_WEATHERED_CUT_COPPER)));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_SLAB = RegisterHelper.registerBlock("waxed_exposed_copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.EXPOSED, PropertyHelper.copyFromBlock(Blocks.WAXED_EXPOSED_CUT_COPPER)));
    public static final RegistryObject<Block> WAXED_COPPER_SLAB = RegisterHelper.registerBlock("waxed_copper_slab",
            () -> new MWWeatheringCopperSlabBlock(WeatheringCopper.WeatherState.UNAFFECTED, PropertyHelper.copyFromBlock(Blocks.WAXED_CUT_COPPER_SLAB)));
    public static final RegistryObject<Block> COPPER_DOOR = RegisterHelper.registerDoor("copper_door", true, MWBlockSetTypes.COPPER);
    public static final RegistryObject<Block> OXIDIZED_COPPER_TRAPDOOR = RegisterHelper.registerBlock("oxidized_copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WEATHERED_COPPER_TRAPDOOR = RegisterHelper.registerBlock("weathered_copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> EXPOSED_COPPER_TRAPDOOR = RegisterHelper.registerBlock("exposed_copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> COPPER_TRAPDOOR = RegisterHelper.registerBlock("copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_TRAPDOOR = RegisterHelper.registerBlock("waxed_oxidized_copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_TRAPDOOR = RegisterHelper.registerBlock("waxed_weathered_copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_TRAPDOOR = RegisterHelper.registerBlock("waxed_exposed_copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> WAXED_COPPER_TRAPDOOR = RegisterHelper.registerBlock("waxed_copper_trapdoor",
            () -> new WeatheringCopperTrapdoorBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> OXIDIZED_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("oxidized_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WEATHERED_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("weathered_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> EXPOSED_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("exposed_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_oxidized_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_weathered_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_exposed_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> WAXED_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> OXIDIZED_COPPER_CHAIN = RegisterHelper.registerBlock("oxidized_copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WEATHERED_COPPER_CHAIN = RegisterHelper.registerBlock("weathered_copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> EXPOSED_COPPER_CHAIN = RegisterHelper.registerBlock("exposed_copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> COPPER_CHAIN = RegisterHelper.registerBlock("copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_CHAIN = RegisterHelper.registerBlock("waxed_oxidized_copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_CHAIN = RegisterHelper.registerBlock("waxed_weathered_copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_CHAIN = RegisterHelper.registerBlock("waxed_exposed_copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> WAXED_COPPER_CHAIN = RegisterHelper.registerBlock("waxed_copper_chain",
            () -> new WeatheringCopperChainBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> OXIDIZED_COPPER_LANTERN = RegisterHelper.registerBlock("oxidized_copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.OXIDIZED, false));
    public static final RegistryObject<Block> WEATHERED_COPPER_LANTERN = RegisterHelper.registerBlock("weathered_copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.WEATHERED, false));
    public static final RegistryObject<Block> EXPOSED_COPPER_LANTERN = RegisterHelper.registerBlock("exposed_copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.EXPOSED, false));
    public static final RegistryObject<Block> COPPER_LANTERN = RegisterHelper.registerBlock("copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED, false));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_LANTERN = RegisterHelper.registerBlock("waxed_oxidized_copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.OXIDIZED, false));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_LANTERN = RegisterHelper.registerBlock("waxed_weathered_copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.WEATHERED, false));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_LANTERN = RegisterHelper.registerBlock("waxed_exposed_copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.EXPOSED, false));
    public static final RegistryObject<Block> WAXED_COPPER_LANTERN = RegisterHelper.registerBlock("waxed_copper_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED, false));
    public static final RegistryObject<Block> OXIDIZED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("oxidized_copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.OXIDIZED, true));
    public static final RegistryObject<Block> WEATHERED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("weathered_copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.WEATHERED, true));
    public static final RegistryObject<Block> EXPOSED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("exposed_copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.EXPOSED, true));
    public static final RegistryObject<Block> COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED, true));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("waxed_oxidized_copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.OXIDIZED, true));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("waxed_weathered_copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.WEATHERED, true));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("waxed_exposed_copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.EXPOSED, true));
    public static final RegistryObject<Block> WAXED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlock("waxed_copper_soul_lantern",
            () -> new WeatheringCopperLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED, true));
    public static final RegistryObject<Block> OXIDIZED_COPPER_BARS = RegisterHelper.registerBlock("oxidized_copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WEATHERED_COPPER_BARS = RegisterHelper.registerBlock("weathered_copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> EXPOSED_COPPER_BARS = RegisterHelper.registerBlock("exposed_copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> COPPER_BARS = RegisterHelper.registerBlock("copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_BARS = RegisterHelper.registerBlock("waxed_oxidized_copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_BARS = RegisterHelper.registerBlock("waxed_weathered_copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_BARS = RegisterHelper.registerBlock("waxed_exposed_copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> WAXED_COPPER_BARS = RegisterHelper.registerBlock("waxed_copper_bars",
            () -> new WeatheringCopperBarsBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> OXIDIZED_COPPER_CAGE = RegisterHelper.registerBlock("oxidized_copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WEATHERED_COPPER_CAGE = RegisterHelper.registerBlock("weathered_copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> EXPOSED_COPPER_CAGE = RegisterHelper.registerBlock("exposed_copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> COPPER_CAGE = RegisterHelper.registerBlock("copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_CAGE = RegisterHelper.registerBlock("waxed_oxidized_copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_CAGE = RegisterHelper.registerBlock("waxed_weathered_copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_CAGE = RegisterHelper.registerBlock("waxed_exposed_copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> WAXED_COPPER_CAGE = RegisterHelper.registerBlock("waxed_copper_cage",
            () -> new WeatheringCopperCageBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> OXIDIZED_CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("oxidized_cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WEATHERED_CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("weathered_cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> EXPOSED_CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("exposed_cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> WAXED_OXIDIZED_CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_oxidized_cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WAXED_WEATHERED_CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_weathered_cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> WAXED_EXPOSED_CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_exposed_cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> WAXED_CUT_COPPER_PRESSURE_PLATE = RegisterHelper.registerBlock("waxed_cut_copper_pressure_plate",
            () -> new WeatheringCopperPressurePlateBlock(WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> NETHERITE_STAIRS = RegisterHelper.registerStair("netherite_stairs", Blocks.NETHERITE_BLOCK::defaultBlockState);
    public static final RegistryObject<Block> NETHERITE_SLAB = RegisterHelper.registerSlab("netherite_slab", () -> Blocks.NETHERITE_BLOCK);
    public static final RegistryObject<Block> NETHERITE_DOOR = RegisterHelper.registerDoor("netherite_door", true, MWBlockSetTypes.NETHERITE);
    public static final RegistryObject<Block> NETHERITE_TRAPDOOR = RegisterHelper.registerTrapdoor("netherite_trapdoor", true, MWBlockSetTypes.NETHERITE);
    public static final RegistryObject<Block> NETHERITE_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("netherite_pressure_plate", 100, MaterialColor.COLOR_BLACK, MWBlockSetTypes.NETHERITE);
    public static final RegistryObject<Block> NETHERITE_CHAIN = RegisterHelper.registerChain("netherite_chain");
    public static final RegistryObject<Block> NETHERITE_LANTERN = RegisterHelper.registerLantern("netherite_lantern", false);
    public static final RegistryObject<Block> NETHERITE_SOUL_LANTERN = RegisterHelper.registerLantern("netherite_soul_lantern", true);
    public static final RegistryObject<Block> NETHERITE_BARS = RegisterHelper.registerBars("netherite_bars");
    public static final RegistryObject<Block> NETHERITE_CAGE = RegisterHelper.registerCage("netherite_cage", () -> Blocks.NETHERITE_BLOCK);
    public static final RegistryObject<Block> CUT_NETHERITE = RegisterHelper.registerBlock("cut_netherite", () -> PropertyHelper.copyFromBlock(Blocks.NETHERITE_BLOCK));
    public static final RegistryObject<Block> CUT_NETHERITE_STAIRS = RegisterHelper.registerStair("cut_netherite_stairs", () -> CUT_NETHERITE.get().defaultBlockState());
    public static final RegistryObject<Block> CUT_NETHERITE_SLAB = RegisterHelper.registerSlab("cut_netherite_slab", CUT_NETHERITE);
    public static final RegistryObject<Block> CUT_NETHERITE_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("cut_netherite_pressure_plate", 100, MaterialColor.COLOR_BLACK, MWBlockSetTypes.NETHERITE);
    public static final RegistryObject<Block> ALUMINUM_STAIRS = RegisterHelper.registerStair("aluminum_stairs", () -> ALUMINUM_BLOCK.get().defaultBlockState());
    public static final RegistryObject<Block> ALUMINUM_SLAB = RegisterHelper.registerSlab("aluminum_slab", ALUMINUM_BLOCK);
    public static final RegistryObject<Block> ALUMINUM_DOOR = RegisterHelper.registerDoor("aluminum_door", true, MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> ALUMINUM_TRAPDOOR = RegisterHelper.registerTrapdoor("aluminum_trapdoor", true, MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> ALUMINUM_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("aluminum_pressure_plate", 15, MWColors.ALUMINUM.toMaterialColor(), MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> ALUMINUM_CHAIN = RegisterHelper.registerChain("aluminum_chain");
    public static final RegistryObject<Block> ALUMINUM_LANTERN = RegisterHelper.registerLantern("aluminum_lantern", false);
    public static final RegistryObject<Block> ALUMINUM_SOUL_LANTERN = RegisterHelper.registerLantern("aluminum_soul_lantern", true);
    public static final RegistryObject<Block> ALUMINUM_BARS = RegisterHelper.registerBars("aluminum_bars");
    public static final RegistryObject<Block> ALUMINUM_CAGE = RegisterHelper.registerCage("aluminum_cage", ALUMINUM_BLOCK);
    public static final RegistryObject<Block> CUT_ALUMINUM = RegisterHelper.registerBlock("cut_aluminum", () -> PropertyHelper.copyFromBlock(ALUMINUM_BLOCK.get()));
    public static final RegistryObject<Block> CUT_ALUMINUM_STAIRS = RegisterHelper.registerStair("cut_aluminum_stairs", () -> CUT_ALUMINUM.get().defaultBlockState());
    public static final RegistryObject<Block> CUT_ALUMINUM_SLAB = RegisterHelper.registerSlab("cut_aluminum_slab", CUT_ALUMINUM);
    public static final RegistryObject<Block> CUT_ALUMINUM_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("cut_aluminum_pressure_plate", 15, MWColors.ALUMINUM.toMaterialColor(), MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> BRONZE_STAIRS = RegisterHelper.registerStair("bronze_stairs", () -> BRONZE_BLOCK.get().defaultBlockState());
    public static final RegistryObject<Block> BRONZE_SLAB = RegisterHelper.registerSlab("bronze_slab", BRONZE_BLOCK);
    public static final RegistryObject<Block> BRONZE_DOOR = RegisterHelper.registerDoor("bronze_door", true, MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> BRONZE_TRAPDOOR = RegisterHelper.registerTrapdoor("bronze_trapdoor", true, MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> BRONZE_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("bronze_pressure_plate", 15, MWColors.BRONZE.toMaterialColor(), MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> BRONZE_CHAIN = RegisterHelper.registerChain("bronze_chain");
    public static final RegistryObject<Block> BRONZE_LANTERN = RegisterHelper.registerLantern("bronze_lantern", false);
    public static final RegistryObject<Block> BRONZE_SOUL_LANTERN = RegisterHelper.registerLantern("bronze_soul_lantern", true);
    public static final RegistryObject<Block> BRONZE_BARS = RegisterHelper.registerBars("bronze_bars");
    public static final RegistryObject<Block> BRONZE_CAGE = RegisterHelper.registerCage("bronze_cage", BRONZE_BLOCK);
    public static final RegistryObject<Block> CUT_BRONZE = RegisterHelper.registerBlock("cut_bronze", () -> PropertyHelper.copyFromBlock(BRONZE_BLOCK.get()));
    public static final RegistryObject<Block> CUT_BRONZE_STAIRS = RegisterHelper.registerStair("cut_bronze_stairs", () -> CUT_BRONZE.get().defaultBlockState());
    public static final RegistryObject<Block> CUT_BRONZE_SLAB = RegisterHelper.registerSlab("cut_bronze_slab", CUT_BRONZE);
    public static final RegistryObject<Block> CUT_BRONZE_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("cut_bronze_pressure_plate", 15, MWColors.BRONZE.toMaterialColor(), MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> SILVER_STAIRS = RegisterHelper.registerStair("silver_stairs", () -> SILVER_BLOCK.get().defaultBlockState());
    public static final RegistryObject<Block> SILVER_SLAB = RegisterHelper.registerSlab("silver_slab", SILVER_BLOCK);
    public static final RegistryObject<Block> SILVER_DOOR = RegisterHelper.registerDoor("silver_door", true, MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> SILVER_TRAPDOOR = RegisterHelper.registerTrapdoor("silver_trapdoor", true, MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> SILVER_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("silver_pressure_plate", 50, MWColors.SILVER.toMaterialColor(), MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> SILVER_CHAIN = RegisterHelper.registerChain("silver_chain");
    public static final RegistryObject<Block> SILVER_LANTERN = RegisterHelper.registerLantern("silver_lantern", false);
    public static final RegistryObject<Block> SILVER_SOUL_LANTERN = RegisterHelper.registerLantern("silver_soul_lantern", true);
    public static final RegistryObject<Block> SILVER_BARS = RegisterHelper.registerBars("silver_bars");
    public static final RegistryObject<Block> SILVER_CAGE = RegisterHelper.registerCage("silver_cage", SILVER_BLOCK);
    public static final RegistryObject<Block> CUT_SILVER = RegisterHelper.registerBlock("cut_silver", () -> PropertyHelper.copyFromBlock(SILVER_BLOCK.get()));
    public static final RegistryObject<Block> CUT_SILVER_STAIRS = RegisterHelper.registerStair("cut_silver_stairs", () -> CUT_SILVER.get().defaultBlockState());
    public static final RegistryObject<Block> CUT_SILVER_SLAB = RegisterHelper.registerSlab("cut_silver_slab", CUT_SILVER);
    public static final RegistryObject<Block> CUT_SILVER_PRESSURE_PLATE = RegisterHelper.registerWeightedPressurePlate("cut_silver_pressure_plate", 50, MWColors.SILVER.toMaterialColor(), MWBlockSetTypes.METAL);
    public static final RegistryObject<Block> STONE_WALL = RegisterHelper.registerWall("stone_wall", () -> Blocks.STONE);
    public static final RegistryObject<Block> STONE_PEBBLE = RegisterHelper.registerPebble("stone_pebble", () -> Blocks.STONE);
    public static final RegistryObject<Block> COBBLESTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("cobblestone_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> COBBLESTONE_BUTTON = RegisterHelper.registerButton("cobblestone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> COBBLESTONE_PEBBLE = RegisterHelper.registerPebble("cobblestone_pebble", () -> Blocks.COBBLESTONE);
    public static final RegistryObject<Block> MOSSY_STONE = RegisterHelper.registerBlock("mossy_stone", () -> PropertyHelper.copyFromBlock(Blocks.STONE));
    public static final RegistryObject<Block> MOSSY_STONE_STAIRS = RegisterHelper.registerStair("mossy_stone_stairs", () -> MOSSY_STONE.get().defaultBlockState());
    public static final RegistryObject<Block> MOSSY_STONE_SLAB = RegisterHelper.registerSlab("mossy_stone_slab", MOSSY_STONE);
    public static final RegistryObject<Block> MOSSY_STONE_WALL = RegisterHelper.registerWall("mossy_stone_wall", MOSSY_STONE);
    public static final RegistryObject<Block> MOSSY_STONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("mossy_stone_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> MOSSY_STONE_BUTTON = RegisterHelper.registerButton("mossy_stone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MOSSY_STONE_PEBBLE = RegisterHelper.registerPebble("mossy_stone_pebble", MOSSY_STONE);
    public static final RegistryObject<Block> MOSSY_COBBLESTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("mossy_cobblestone_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> MOSSY_COBBLESTONE_BUTTON = RegisterHelper.registerButton("mossy_cobblestone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MOSSY_COBBLESTONE_PEBBLE = RegisterHelper.registerPebble("mossy_cobblestone_pebble", () -> Blocks.MOSSY_COBBLESTONE);
    public static final RegistryObject<Block> SMOOTH_STONE_STAIRS = RegisterHelper.registerStair("smooth_stone_stairs", Blocks.SMOOTH_STONE::defaultBlockState);
    public static final RegistryObject<Block> SMOOTH_STONE_WALL = RegisterHelper.registerWall("smooth_stone_wall", () -> Blocks.SMOOTH_STONE);
    public static final RegistryObject<Block> SMOOTH_STONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("smooth_stone_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_STONE_BUTTON = RegisterHelper.registerButton("smooth_stone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_STONE_PEBBLE = RegisterHelper.registerPebble("smooth_stone_pebble", () -> Blocks.SMOOTH_STONE);
    public static final RegistryObject<Block> STONE_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("stone_bricks_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> STONE_BRICKS_BUTTON = RegisterHelper.registerButton("stone_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> STONE_BRICKS_PEBBLE = RegisterHelper.registerPebble("stone_bricks_pebble", () -> Blocks.STONE_BRICKS);
    public static final RegistryObject<Block> MOSSY_STONE_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("mossy_stone_bricks_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> MOSSY_STONE_BRICKS_BUTTON = RegisterHelper.registerButton("mossy_stone_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MOSSY_STONE_BRICKS_PEBBLE = RegisterHelper.registerPebble("mossy_stone_bricks_pebble", () -> Blocks.MOSSY_STONE_BRICKS);
    public static final RegistryObject<Block> MOSSY_CHISELED_STONE_BRICKS = RegisterHelper.registerBlock("mossy_chiseled_stone_bricks", () -> PropertyHelper.copyFromBlock(Blocks.CHISELED_STONE_BRICKS));
    public static final RegistryObject<Block> MOSSY_CRACKED_STONE_BRICKS = RegisterHelper.registerBlock("mossy_cracked_stone_bricks", () -> PropertyHelper.copyFromBlock(Blocks.CRACKED_STONE_BRICKS));
    public static final RegistryObject<Block> GRANITE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("granite_pressure_plate", false, MaterialColor.DIRT, BlockSetType.STONE);
    public static final RegistryObject<Block> GRANITE_BUTTON = RegisterHelper.registerButton("granite_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GRANITE_PEBBLE = RegisterHelper.registerPebble("granite_pebble", () -> Blocks.GRANITE);
    public static final RegistryObject<Block> POLISHED_GRANITE_WALL = RegisterHelper.registerWall("polished_granite_wall", () -> Blocks.POLISHED_GRANITE);
    public static final RegistryObject<Block> POLISHED_GRANITE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("polished_granite_pressure_plate", false, MaterialColor.DIRT, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_GRANITE_BUTTON = RegisterHelper.registerButton("polished_granite_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_GRANITE_PEBBLE = RegisterHelper.registerPebble("polished_granite_pebble", () -> Blocks.POLISHED_GRANITE);
    public static final RegistryObject<Block> DIORITE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("diorite_pressure_plate", false, MaterialColor.QUARTZ, BlockSetType.STONE);
    public static final RegistryObject<Block> DIORITE_BUTTON = RegisterHelper.registerButton("diorite_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> DIORITE_PEBBLE = RegisterHelper.registerPebble("diorite_pebble", () -> Blocks.DIORITE);
    public static final RegistryObject<Block> POLISHED_DIORITE_WALL = RegisterHelper.registerWall("polished_diorite_wall", () -> Blocks.POLISHED_DIORITE);
    public static final RegistryObject<Block> POLISHED_DIORITE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("polished_diorite_pressure_plate", false, MaterialColor.QUARTZ, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_DIORITE_BUTTON = RegisterHelper.registerButton("polished_diorite_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_DIORITE_PEBBLE = RegisterHelper.registerPebble("polished_diorite_pebble", () -> Blocks.POLISHED_DIORITE);
    public static final RegistryObject<Block> ANDESITE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("andesite_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> ANDESITE_BUTTON = RegisterHelper.registerButton("andesite_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> ANDESITE_PEBBLE = RegisterHelper.registerPebble("andesite_pebble", () -> Blocks.ANDESITE);
    public static final RegistryObject<Block> POLISHED_ANDESITE_WALL = RegisterHelper.registerWall("polished_andesite_wall", () -> Blocks.POLISHED_ANDESITE);
    public static final RegistryObject<Block> POLISHED_ANDESITE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("polished_andesite_pressure_plate", false, MaterialColor.STONE, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_ANDESITE_BUTTON = RegisterHelper.registerButton("polished_andesite_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_ANDESITE_PEBBLE = RegisterHelper.registerPebble("polished_andesite_pebble", () -> Blocks.POLISHED_ANDESITE);
    public static final RegistryObject<Block> DEEPSLATE_STAIRS = RegisterHelper.registerStair("deepslate_stairs", Blocks.DEEPSLATE::defaultBlockState);
    public static final RegistryObject<Block> DEEPSLATE_SLAB = RegisterHelper.registerSlab("deepslate_slab", () -> Blocks.DEEPSLATE);
    public static final RegistryObject<Block> DEEPSLATE_WALL = RegisterHelper.registerWall("deepslate_wall", () -> Blocks.DEEPSLATE);
    public static final RegistryObject<Block> DEEPSLATE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("deepslate_pressure_plate", false, MaterialColor.DEEPSLATE, BlockSetType.STONE);
    public static final RegistryObject<Block> DEEPSLATE_BUTTON = RegisterHelper.registerButton("deepslate_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> DEEPSLATE_PEBBLE = RegisterHelper.registerPebble("deepslate_pebble", () -> Blocks.DEEPSLATE);
    public static final RegistryObject<Block> COBBLED_DEEPSLATE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("cobbled_deepslate_pressure_plate", false, MaterialColor.DEEPSLATE, BlockSetType.STONE);
    public static final RegistryObject<Block> COBBLED_DEEPSLATE_BUTTON = RegisterHelper.registerButton("cobbled_deepslate_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> COBBLED_DEEPSLATE_PEBBLE = RegisterHelper.registerPebble("cobbled_deepslate_pebble", () -> Blocks.COBBLED_DEEPSLATE);
    public static final RegistryObject<Block> POLISHED_DEEPSLATE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("polished_deepslate_pressure_plate", false, MaterialColor.DEEPSLATE, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_DEEPSLATE_BUTTON = RegisterHelper.registerButton("polished_deepslate_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_DEEPSLATE_PEBBLE = RegisterHelper.registerPebble("polished_deepslate_pebble", () -> Blocks.POLISHED_DEEPSLATE);
    public static final RegistryObject<Block> DEEPSLATE_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("deepslate_bricks_pressure_plate", false, MaterialColor.DEEPSLATE, BlockSetType.STONE);
    public static final RegistryObject<Block> DEEPSLATE_BRICKS_BUTTON = RegisterHelper.registerButton("deepslate_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> DEEPSLATE_BRICKS_PEBBLE = RegisterHelper.registerPebble("deepslate_bricks_pebble", () -> Blocks.DEEPSLATE_BRICKS);
    public static final RegistryObject<Block> DEEPSLATE_TILES_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("deepslate_tiles_pressure_plate", false, MaterialColor.DEEPSLATE, BlockSetType.STONE);
    public static final RegistryObject<Block> DEEPSLATE_TILES_BUTTON = RegisterHelper.registerButton("deepslate_tiles_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> DEEPSLATE_TILES_PEBBLE = RegisterHelper.registerPebble("deepslate_tiles_pebble", () -> Blocks.DEEPSLATE_TILES);
    public static final RegistryObject<Block> REINFORCED_DEEPSLATE_STAIRS = RegisterHelper.registerStair("reinforced_deepslate_stairs", Blocks.REINFORCED_DEEPSLATE::defaultBlockState);
    public static final RegistryObject<Block> REINFORCED_DEEPSLATE_SLAB = RegisterHelper.registerSlab("reinforced_deepslate_slab", () -> Blocks.REINFORCED_DEEPSLATE);
    public static final RegistryObject<Block> REINFORCED_DEEPSLATE_WALL = RegisterHelper.registerWall("reinforced_deepslate_wall", () -> Blocks.REINFORCED_DEEPSLATE);
    public static final RegistryObject<Block> REINFORCED_DEEPSLATE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("reinforced_deepslate_pressure_plate", false, MaterialColor.DEEPSLATE, BlockSetType.STONE);
    public static final RegistryObject<Block> REINFORCED_DEEPSLATE_BUTTON = RegisterHelper.registerButton("reinforced_deepslate_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> REINFORCED_DEEPSLATE_PEBBLE = RegisterHelper.registerPebble("reinforced_deepslate_pebble", () -> Blocks.REINFORCED_DEEPSLATE);
    public static final RegistryObject<Block> BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("bricks_pressure_plate", false, MaterialColor.COLOR_RED, BlockSetType.STONE);
    public static final RegistryObject<Block> BRICKS_BUTTON = RegisterHelper.registerButton("bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BRICKS_PEBBLE = RegisterHelper.registerPebble("bricks_pebble", () -> Blocks.BRICKS);
    public static final RegistryObject<Block> MUD_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("mud_bricks_pressure_plate", false, MaterialColor.TERRACOTTA_LIGHT_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> MUD_BRICKS_BUTTON = RegisterHelper.registerButton("mud_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MUD_BRICKS_PEBBLE = RegisterHelper.registerPebble("mud_bricks_pebble", () -> Blocks.MUD_BRICKS);
    public static final RegistryObject<Block> SANDSTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("sandstone_pressure_plate", false, MaterialColor.SAND, BlockSetType.STONE);
    public static final RegistryObject<Block> SANDSTONE_BUTTON = RegisterHelper.registerButton("sandstone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> SANDSTONE_PEBBLE = RegisterHelper.registerPebble("sandstone_pebble", () -> Blocks.SANDSTONE);
    public static final RegistryObject<Block> SMOOTH_SANDSTONE_WALL = RegisterHelper.registerWall("smooth_sandstone_wall", () -> Blocks.SANDSTONE);
    public static final RegistryObject<Block> SMOOTH_SANDSTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("smooth_sandstone_pressure_plate", false, MaterialColor.SAND, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_SANDSTONE_BUTTON = RegisterHelper.registerButton("smooth_sandstone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_SANDSTONE_PEBBLE = RegisterHelper.registerPebble("smooth_sandstone_pebble", () -> Blocks.SMOOTH_SANDSTONE);
    public static final RegistryObject<Block> CUT_SANDSTONE_STAIRS = RegisterHelper.registerStair("cut_sandstone_stairs", Blocks.CUT_SANDSTONE::defaultBlockState);
    public static final RegistryObject<Block> CUT_SANDSTONE_WALL = RegisterHelper.registerWall("cut_sandstone_wall", () -> Blocks.CUT_SANDSTONE);
    public static final RegistryObject<Block> RED_SANDSTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("red_sandstone_pressure_plate", false, MaterialColor.COLOR_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_SANDSTONE_BUTTON = RegisterHelper.registerButton("red_sandstone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_SANDSTONE_PEBBLE = RegisterHelper.registerPebble("red_sandstone_pebble", () -> Blocks.RED_SANDSTONE);
    public static final RegistryObject<Block> SMOOTH_RED_SANDSTONE_WALL = RegisterHelper.registerWall("smooth_red_sandstone_wall", () -> Blocks.RED_SANDSTONE);
    public static final RegistryObject<Block> SMOOTH_RED_SANDSTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("smooth_red_sandstone_pressure_plate", false, MaterialColor.COLOR_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_RED_SANDSTONE_BUTTON = RegisterHelper.registerButton("smooth_red_sandstone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_RED_SANDSTONE_PEBBLE = RegisterHelper.registerPebble("smooth_red_sandstone_pebble", () -> Blocks.SMOOTH_RED_SANDSTONE);
    public static final RegistryObject<Block> CUT_RED_SANDSTONE_STAIRS = RegisterHelper.registerStair("cut_red_sandstone_stairs", Blocks.CUT_RED_SANDSTONE::defaultBlockState);
    public static final RegistryObject<Block> CUT_RED_SANDSTONE_WALL = RegisterHelper.registerWall("cut_red_sandstone_wall", () -> Blocks.CUT_RED_SANDSTONE);
    public static final RegistryObject<Block> PRISMARINE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("prismarine_pressure_plate", false, MaterialColor.COLOR_CYAN, BlockSetType.STONE);
    public static final RegistryObject<Block> PRISMARINE_BUTTON = RegisterHelper.registerButton("prismarine_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PRISMARINE_PEBBLE = RegisterHelper.registerPebble("prismarine_pebble", () -> Blocks.PRISMARINE);
    public static final RegistryObject<Block> PRISMARINE_BRICKS_WALL = RegisterHelper.registerWall("prismarine_bricks_wall", () -> Blocks.PRISMARINE_BRICKS);
    public static final RegistryObject<Block> PRISMARINE_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("prismarine_bricks_pressure_plate", false, MaterialColor.DIAMOND, BlockSetType.STONE);
    public static final RegistryObject<Block> PRISMARINE_BRICKS_BUTTON = RegisterHelper.registerButton("prismarine_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PRISMARINE_BRICKS_PEBBLE = RegisterHelper.registerPebble("prismarine_bricks_pebble", () -> Blocks.PRISMARINE_BRICKS);
    public static final RegistryObject<Block> DARK_PRISMARINE_WALL = RegisterHelper.registerWall("dark_prismarine_wall", () -> Blocks.DARK_PRISMARINE);
    public static final RegistryObject<Block> DARK_PRISMARINE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("dark_prismarine_pressure_plate", false, MaterialColor.DIAMOND, BlockSetType.STONE);
    public static final RegistryObject<Block> DARK_PRISMARINE_BUTTON = RegisterHelper.registerButton("dark_prismarine_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> DARK_PRISMARINE_PEBBLE = RegisterHelper.registerPebble("dark_prismarine_pebble", () -> Blocks.DARK_PRISMARINE);
    public static final RegistryObject<Block> NETHERRACK_STAIRS = RegisterHelper.registerStair("netherrack_stairs", Blocks.NETHERRACK::defaultBlockState);
    public static final RegistryObject<Block> NETHERRACK_SLAB = RegisterHelper.registerSlab("netherrack_slab", () -> Blocks.NETHERRACK);
    public static final RegistryObject<Block> NETHERRACK_WALL = RegisterHelper.registerWall("netherrack_wall", () -> Blocks.NETHERRACK);
    public static final RegistryObject<Block> NETHERRACK_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("netherrack_pressure_plate", false, MaterialColor.NETHER, BlockSetType.STONE);
    public static final RegistryObject<Block> NETHERRACK_BUTTON = RegisterHelper.registerButton("netherrack_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> NETHERRACK_PEBBLE = RegisterHelper.registerPebble("netherrack_pebble", () -> Blocks.NETHERRACK);
    public static final RegistryObject<Block> NETHER_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("nether_bricks_pressure_plate", false, MaterialColor.NETHER, BlockSetType.STONE);
    public static final RegistryObject<Block> NETHER_BRICKS_BUTTON = RegisterHelper.registerButton("nether_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> NETHER_BRICKS_PEBBLE = RegisterHelper.registerPebble("nether_bricks_pebble", () -> Blocks.NETHER_BRICKS);
    public static final RegistryObject<Block> RED_NETHER_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("red_nether_bricks_pressure_plate", false, MaterialColor.NETHER, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_NETHER_BRICKS_BUTTON = RegisterHelper.registerButton("red_nether_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_NETHER_BRICKS_PEBBLE = RegisterHelper.registerPebble("red_nether_bricks_pebble", () -> Blocks.RED_NETHER_BRICKS);
    public static final RegistryObject<Block> CRACKED_RED_NETHER_BRICKS = RegisterHelper.registerBlock("cracked_red_nether_bricks", () -> PropertyHelper.copyFromBlock(Blocks.RED_NETHER_BRICKS));
    public static final RegistryObject<Block> CHISELED_RED_NETHER_BRICKS = RegisterHelper.registerBlock("chiseled_red_nether_bricks", () -> PropertyHelper.copyFromBlock(Blocks.RED_NETHER_BRICKS));
    public static final RegistryObject<Block> BASALT_STAIRS = RegisterHelper.registerStair("basalt_stairs", Blocks.BASALT::defaultBlockState);
    public static final RegistryObject<Block> BASALT_SLAB = RegisterHelper.registerSlab("basalt_slab", () -> Blocks.BASALT);
    public static final RegistryObject<Block> BASALT_WALL = RegisterHelper.registerWall("basalt_wall", () -> Blocks.BASALT);
    public static final RegistryObject<Block> BASALT_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("basalt_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> BASALT_BUTTON = RegisterHelper.registerButton("basalt_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BASALT_PEBBLE = RegisterHelper.registerPebble("basalt_pebble", () -> Blocks.BASALT);
    public static final RegistryObject<Block> SMOOTH_BASALT_STAIRS = RegisterHelper.registerStair("smooth_basalt_stairs", Blocks.SMOOTH_BASALT::defaultBlockState);
    public static final RegistryObject<Block> SMOOTH_BASALT_SLAB = RegisterHelper.registerSlab("smooth_basalt_slab", () -> Blocks.SMOOTH_BASALT);
    public static final RegistryObject<Block> SMOOTH_BASALT_WALL = RegisterHelper.registerWall("smooth_basalt_wall", () -> Blocks.SMOOTH_BASALT);
    public static final RegistryObject<Block> SMOOTH_BASALT_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("smooth_basalt_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_BASALT_BUTTON = RegisterHelper.registerButton("smooth_basalt_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_BASALT_PEBBLE = RegisterHelper.registerPebble("smooth_basalt_pebble", () -> Blocks.SMOOTH_BASALT);
    public static final RegistryObject<Block> POLISHED_BASALT_STAIRS = RegisterHelper.registerStair("polished_basalt_stairs", Blocks.POLISHED_BASALT::defaultBlockState);
    public static final RegistryObject<Block> POLISHED_BASALT_SLAB = RegisterHelper.registerSlab("polished_basalt_slab", () -> Blocks.POLISHED_BASALT);
    public static final RegistryObject<Block> POLISHED_BASALT_WALL = RegisterHelper.registerWall("polished_basalt_wall", () -> Blocks.POLISHED_BASALT);
    public static final RegistryObject<Block> POLISHED_BASALT_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("polished_basalt_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_BASALT_BUTTON = RegisterHelper.registerButton("polished_basalt_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_BASALT_PEBBLE = RegisterHelper.registerPebble("polished_basalt_pebble", () -> Blocks.POLISHED_BASALT);
    public static final RegistryObject<Block> BLACKSTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("blackstone_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACKSTONE_BUTTON = RegisterHelper.registerButton("blackstone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACKSTONE_PEBBLE = RegisterHelper.registerPebble("blackstone_pebble", () -> Blocks.BLACKSTONE);
    public static final RegistryObject<Block> POLISHED_BLACKSTONE_PEBBLE = RegisterHelper.registerPebble("polished_blackstone_pebble", () -> Blocks.POLISHED_BLACKSTONE);
    public static final RegistryObject<Block> POLISHED_BLACKSTONE_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("polished_blackstone_bricks_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_BLACKSTONE_BRICKS_BUTTON = RegisterHelper.registerButton("polished_blackstone_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> POLISHED_BLACKSTONE_BRICKS_PEBBLE = RegisterHelper.registerPebble("polished_blackstone_bricks_pebble", () -> Blocks.POLISHED_BLACKSTONE_BRICKS);
    public static final RegistryObject<Block> GILDED_BLACKSTONE_STAIRS = RegisterHelper.registerStair("gilded_blackstone_stairs", Blocks.GILDED_BLACKSTONE::defaultBlockState);
    public static final RegistryObject<Block> GILDED_BLACKSTONE_SLAB = RegisterHelper.registerSlab("gilded_blackstone_slab", () -> Blocks.GILDED_BLACKSTONE);
    public static final RegistryObject<Block> GILDED_BLACKSTONE_WALL = RegisterHelper.registerWall("gilded_blackstone_wall", () -> Blocks.GILDED_BLACKSTONE);
    public static final RegistryObject<Block> GILDED_BLACKSTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("gilded_blackstone_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> GILDED_BLACKSTONE_BUTTON = RegisterHelper.registerButton("gilded_blackstone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GILDED_BLACKSTONE_PEBBLE = RegisterHelper.registerPebble("gilded_blackstone_pebble", () -> Blocks.GILDED_BLACKSTONE);
    public static final RegistryObject<Block> END_STONE_STAIRS = RegisterHelper.registerStair("end_stone_stairs", Blocks.END_STONE::defaultBlockState);
    public static final RegistryObject<Block> END_STONE_SLAB = RegisterHelper.registerSlab("end_stone_slab", () -> Blocks.END_STONE);
    public static final RegistryObject<Block> END_STONE_WALL = RegisterHelper.registerWall("end_stone_wall", () -> Blocks.END_STONE);
    public static final RegistryObject<Block> END_STONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("end_stone_pressure_plate", false, MaterialColor.SAND, BlockSetType.STONE);
    public static final RegistryObject<Block> END_STONE_BUTTON = RegisterHelper.registerButton("end_stone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> END_STONE_PEBBLE = RegisterHelper.registerPebble("end_stone_pebble", () -> Blocks.END_STONE);
    public static final RegistryObject<Block> END_STONE_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("end_stone_bricks_pressure_plate", false, MaterialColor.SAND, BlockSetType.STONE);
    public static final RegistryObject<Block> END_STONE_BRICKS_BUTTON = RegisterHelper.registerButton("end_stone_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> END_STONE_BRICKS_PEBBLE = RegisterHelper.registerPebble("end_stone_bricks_pebble", () -> Blocks.END_STONE_BRICKS);
    public static final RegistryObject<Block> PURPUR_WALL = RegisterHelper.registerWall("purpur_wall", () -> Blocks.PURPUR_BLOCK);
    public static final RegistryObject<Block> PURPUR_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("purpur_pressure_plate", false, MaterialColor.COLOR_MAGENTA, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPUR_BUTTON = RegisterHelper.registerButton("purpur_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPUR_PEBBLE = RegisterHelper.registerPebble("purpur_pebble", () -> Blocks.PURPUR_BLOCK);
    public static final RegistryObject<Block> PURPUR_PILLAR_STAIRS = RegisterHelper.registerStair("purpur_pillar_stairs", Blocks.PURPUR_PILLAR::defaultBlockState);
    public static final RegistryObject<Block> PURPUR_PILLAR_SLAB = RegisterHelper.registerSlab("purpur_pillar_slab", () -> Blocks.PURPUR_PILLAR);
    public static final RegistryObject<Block> PURPUR_PILLAR_WALL = RegisterHelper.registerWall("purpur_pillar_wall", () -> Blocks.PURPUR_PILLAR);
    public static final RegistryObject<Block> PURPUR_PILLAR_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("purpur_pillar_pressure_plate", false, MaterialColor.COLOR_MAGENTA, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPUR_PILLAR_BUTTON = RegisterHelper.registerButton("purpur_pillar_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPUR_PILLAR_PEBBLE = RegisterHelper.registerPebble("purpur_pillar_pebble", () -> Blocks.PURPUR_PILLAR);
    public static final RegistryObject<Block> QUARTZ_WALL = RegisterHelper.registerWall("quartz_wall", () -> Blocks.QUARTZ_BLOCK);
    public static final RegistryObject<Block> QUARTZ_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("quartz_pressure_plate", false, MaterialColor.QUARTZ, BlockSetType.STONE);
    public static final RegistryObject<Block> QUARTZ_BUTTON = RegisterHelper.registerButton("quartz_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> QUARTZ_PEBBLE = RegisterHelper.registerPebble("quartz_pebble", () -> Blocks.QUARTZ_BLOCK);
    public static final RegistryObject<Block> SMOOTH_QUARTZ_WALL = RegisterHelper.registerWall("smooth_quartz_wall", () -> Blocks.SMOOTH_QUARTZ);
    public static final RegistryObject<Block> SMOOTH_QUARTZ_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("smooth_quartz_pressure_plate", false, MaterialColor.QUARTZ, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_QUARTZ_BUTTON = RegisterHelper.registerButton("smooth_quartz_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> SMOOTH_QUARTZ_PEBBLE = RegisterHelper.registerPebble("smooth_quartz_pebble", () -> Blocks.SMOOTH_QUARTZ);
    public static final RegistryObject<Block> QUARTZ_BRICKS_STAIRS = RegisterHelper.registerStair("quartz_bricks_stairs", Blocks.QUARTZ_BRICKS::defaultBlockState);
    public static final RegistryObject<Block> QUARTZ_BRICKS_SLAB = RegisterHelper.registerSlab("quartz_bricks_slab", () -> Blocks.QUARTZ_BRICKS);
    public static final RegistryObject<Block> QUARTZ_BRICKS_WALL = RegisterHelper.registerWall("quartz_bricks_wall", () -> Blocks.QUARTZ_BRICKS);
    public static final RegistryObject<Block> QUARTZ_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("quartz_bricks_pressure_plate", false, MaterialColor.QUARTZ, BlockSetType.STONE);
    public static final RegistryObject<Block> QUARTZ_BRICKS_BUTTON = RegisterHelper.registerButton("quartz_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> QUARTZ_BRICKS_PEBBLE = RegisterHelper.registerPebble("quartz_bricks_pebble", () -> Blocks.QUARTZ_BRICKS);
    public static final RegistryObject<Block> QUARTZ_PILLAR_STAIRS = RegisterHelper.registerStair("quartz_pillar_stairs", Blocks.QUARTZ_PILLAR::defaultBlockState);
    public static final RegistryObject<Block> QUARTZ_PILLAR_SLAB = RegisterHelper.registerSlab("quartz_pillar_slab", () -> Blocks.QUARTZ_PILLAR);
    public static final RegistryObject<Block> QUARTZ_PILLAR_WALL = RegisterHelper.registerWall("quartz_pillar_wall", () -> Blocks.QUARTZ_PILLAR);
    public static final RegistryObject<Block> QUARTZ_PILLAR_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("quartz_pillar_pressure_plate", false, MaterialColor.QUARTZ, BlockSetType.STONE);
    public static final RegistryObject<Block> QUARTZ_PILLAR_BUTTON = RegisterHelper.registerButton("quartz_pillar_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> QUARTZ_PILLAR_PEBBLE = RegisterHelper.registerPebble("quartz_pillar_pebble", () -> Blocks.QUARTZ_PILLAR);
    public static final RegistryObject<Block> TERRACOTTA_STAIRS = RegisterHelper.registerStair("terracotta_stairs", Blocks.TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> TERRACOTTA_SLAB = RegisterHelper.registerSlab("terracotta_slab", () -> Blocks.TERRACOTTA);
    public static final RegistryObject<Block> TERRACOTTA_WALL = RegisterHelper.registerWall("terracotta_wall", () -> Blocks.TERRACOTTA);
    public static final RegistryObject<Block> TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("terracotta_pressure_plate", false, MaterialColor.COLOR_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> TERRACOTTA_BUTTON = RegisterHelper.registerButton("terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("terracotta_pebble", () -> Blocks.TERRACOTTA);
    public static final RegistryObject<Block> WHITE_TERRACOTTA_STAIRS = RegisterHelper.registerStair("white_terracotta_stairs", Blocks.WHITE_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> WHITE_TERRACOTTA_SLAB = RegisterHelper.registerSlab("white_terracotta_slab", () -> Blocks.WHITE_TERRACOTTA);
    public static final RegistryObject<Block> WHITE_TERRACOTTA_WALL = RegisterHelper.registerWall("white_terracotta_wall", () -> Blocks.WHITE_TERRACOTTA);
    public static final RegistryObject<Block> WHITE_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("white_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_WHITE, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_TERRACOTTA_BUTTON = RegisterHelper.registerButton("white_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("white_terracotta_pebble", () -> Blocks.WHITE_TERRACOTTA);
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_STAIRS = RegisterHelper.registerStair("orange_terracotta_stairs", Blocks.ORANGE_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_SLAB = RegisterHelper.registerSlab("orange_terracotta_slab", () -> Blocks.ORANGE_TERRACOTTA);
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_WALL = RegisterHelper.registerWall("orange_terracotta_wall", () -> Blocks.ORANGE_TERRACOTTA);
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("orange_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_BUTTON = RegisterHelper.registerButton("orange_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("orange_terracotta_pebble", () -> Blocks.ORANGE_TERRACOTTA);
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_STAIRS = RegisterHelper.registerStair("magenta_terracotta_stairs", Blocks.MAGENTA_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_SLAB = RegisterHelper.registerSlab("magenta_terracotta_slab", () -> Blocks.MAGENTA_TERRACOTTA);
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_WALL = RegisterHelper.registerWall("magenta_terracotta_wall", () -> Blocks.MAGENTA_TERRACOTTA);
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("magenta_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_MAGENTA, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_BUTTON = RegisterHelper.registerButton("magenta_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("magenta_terracotta_pebble", () -> Blocks.MAGENTA_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_STAIRS = RegisterHelper.registerStair("light_blue_terracotta_stairs", Blocks.LIGHT_BLUE_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_SLAB = RegisterHelper.registerSlab("light_blue_terracotta_slab", () -> Blocks.LIGHT_BLUE_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_WALL = RegisterHelper.registerWall("light_blue_terracotta_wall", () -> Blocks.LIGHT_BLUE_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_blue_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_LIGHT_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_BUTTON = RegisterHelper.registerButton("light_blue_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("light_blue_terracotta_pebble", () -> Blocks.LIGHT_BLUE_TERRACOTTA);
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_STAIRS = RegisterHelper.registerStair("yellow_terracotta_stairs", Blocks.YELLOW_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_SLAB = RegisterHelper.registerSlab("yellow_terracotta_slab", () -> Blocks.YELLOW_TERRACOTTA);
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_WALL = RegisterHelper.registerWall("yellow_terracotta_wall", () -> Blocks.YELLOW_TERRACOTTA);
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("yellow_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_YELLOW, BlockSetType.STONE);
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_BUTTON = RegisterHelper.registerButton("yellow_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("yellow_terracotta_pebble", () -> Blocks.YELLOW_TERRACOTTA);
    public static final RegistryObject<Block> LIME_TERRACOTTA_STAIRS = RegisterHelper.registerStair("lime_terracotta_stairs", Blocks.LIME_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> LIME_TERRACOTTA_SLAB = RegisterHelper.registerSlab("lime_terracotta_slab", () -> Blocks.LIME_TERRACOTTA);
    public static final RegistryObject<Block> LIME_TERRACOTTA_WALL = RegisterHelper.registerWall("lime_terracotta_wall", () -> Blocks.LIME_TERRACOTTA);
    public static final RegistryObject<Block> LIME_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("lime_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_LIGHT_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_TERRACOTTA_BUTTON = RegisterHelper.registerButton("lime_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("lime_terracotta_pebble", () -> Blocks.LIME_TERRACOTTA);
    public static final RegistryObject<Block> PINK_TERRACOTTA_STAIRS = RegisterHelper.registerStair("pink_terracotta_stairs", Blocks.PINK_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> PINK_TERRACOTTA_SLAB = RegisterHelper.registerSlab("pink_terracotta_slab", () -> Blocks.PINK_TERRACOTTA);
    public static final RegistryObject<Block> PINK_TERRACOTTA_WALL = RegisterHelper.registerWall("pink_terracotta_wall", () -> Blocks.PINK_TERRACOTTA);
    public static final RegistryObject<Block> PINK_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("pink_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_PINK, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_TERRACOTTA_BUTTON = RegisterHelper.registerButton("pink_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("pink_terracotta_pebble", () -> Blocks.PINK_TERRACOTTA);
    public static final RegistryObject<Block> GRAY_TERRACOTTA_STAIRS = RegisterHelper.registerStair("gray_terracotta_stairs", Blocks.GRAY_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> GRAY_TERRACOTTA_SLAB = RegisterHelper.registerSlab("gray_terracotta_slab", () -> Blocks.GRAY_TERRACOTTA);
    public static final RegistryObject<Block> GRAY_TERRACOTTA_WALL = RegisterHelper.registerWall("gray_terracotta_wall", () -> Blocks.GRAY_TERRACOTTA);
    public static final RegistryObject<Block> GRAY_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("gray_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_TERRACOTTA_BUTTON = RegisterHelper.registerButton("gray_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("gray_terracotta_pebble", () -> Blocks.GRAY_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_STAIRS = RegisterHelper.registerStair("light_gray_terracotta_stairs", Blocks.LIGHT_GRAY_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_SLAB = RegisterHelper.registerSlab("light_gray_terracotta_slab", () -> Blocks.LIGHT_GRAY_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_WALL = RegisterHelper.registerWall("light_gray_terracotta_wall", () -> Blocks.LIGHT_GRAY_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_gray_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_LIGHT_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_BUTTON = RegisterHelper.registerButton("light_gray_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("light_gray_terracotta_pebble", () -> Blocks.LIGHT_GRAY_TERRACOTTA);
    public static final RegistryObject<Block> CYAN_TERRACOTTA_STAIRS = RegisterHelper.registerStair("cyan_terracotta_stairs", Blocks.CYAN_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> CYAN_TERRACOTTA_SLAB = RegisterHelper.registerSlab("cyan_terracotta_slab", () -> Blocks.CYAN_TERRACOTTA);
    public static final RegistryObject<Block> CYAN_TERRACOTTA_WALL = RegisterHelper.registerWall("cyan_terracotta_wall", () -> Blocks.CYAN_TERRACOTTA);
    public static final RegistryObject<Block> CYAN_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("cyan_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_CYAN, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_TERRACOTTA_BUTTON = RegisterHelper.registerButton("cyan_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("cyan_terracotta_pebble", () -> Blocks.CYAN_TERRACOTTA);
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_STAIRS = RegisterHelper.registerStair("purple_terracotta_stairs", Blocks.PURPLE_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_SLAB = RegisterHelper.registerSlab("purple_terracotta_slab", () -> Blocks.PURPLE_TERRACOTTA);
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_WALL = RegisterHelper.registerWall("purple_terracotta_wall", () -> Blocks.PURPLE_TERRACOTTA);
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("purple_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_PURPLE, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_BUTTON = RegisterHelper.registerButton("purple_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("purple_terracotta_pebble", () -> Blocks.PURPLE_TERRACOTTA);
    public static final RegistryObject<Block> BLUE_TERRACOTTA_STAIRS = RegisterHelper.registerStair("blue_terracotta_stairs", Blocks.BLUE_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> BLUE_TERRACOTTA_SLAB = RegisterHelper.registerSlab("blue_terracotta_slab", () -> Blocks.BLUE_TERRACOTTA);
    public static final RegistryObject<Block> BLUE_TERRACOTTA_WALL = RegisterHelper.registerWall("blue_terracotta_wall", () -> Blocks.BLUE_TERRACOTTA);
    public static final RegistryObject<Block> BLUE_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("blue_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_TERRACOTTA_BUTTON = RegisterHelper.registerButton("blue_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("blue_terracotta_pebble", () -> Blocks.BLUE_TERRACOTTA);
    public static final RegistryObject<Block> BROWN_TERRACOTTA_STAIRS = RegisterHelper.registerStair("brown_terracotta_stairs", Blocks.BROWN_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> BROWN_TERRACOTTA_SLAB = RegisterHelper.registerSlab("brown_terracotta_slab", () -> Blocks.BROWN_TERRACOTTA);
    public static final RegistryObject<Block> BROWN_TERRACOTTA_WALL = RegisterHelper.registerWall("brown_terracotta_wall", () -> Blocks.BROWN_TERRACOTTA);
    public static final RegistryObject<Block> BROWN_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("brown_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_BROWN, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_TERRACOTTA_BUTTON = RegisterHelper.registerButton("brown_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("brown_terracotta_pebble", () -> Blocks.BROWN_TERRACOTTA);
    public static final RegistryObject<Block> GREEN_TERRACOTTA_STAIRS = RegisterHelper.registerStair("green_terracotta_stairs", Blocks.GREEN_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> GREEN_TERRACOTTA_SLAB = RegisterHelper.registerSlab("green_terracotta_slab", () -> Blocks.GREEN_TERRACOTTA);
    public static final RegistryObject<Block> GREEN_TERRACOTTA_WALL = RegisterHelper.registerWall("green_terracotta_wall", () -> Blocks.GREEN_TERRACOTTA);
    public static final RegistryObject<Block> GREEN_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("green_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_TERRACOTTA_BUTTON = RegisterHelper.registerButton("green_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("green_terracotta_pebble", () -> Blocks.GREEN_TERRACOTTA);
    public static final RegistryObject<Block> RED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("red_terracotta_stairs", Blocks.RED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> RED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("red_terracotta_slab", () -> Blocks.RED_TERRACOTTA);
    public static final RegistryObject<Block> RED_TERRACOTTA_WALL = RegisterHelper.registerWall("red_terracotta_wall", () -> Blocks.RED_TERRACOTTA);
    public static final RegistryObject<Block> RED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("red_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_RED, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("red_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("red_terracotta_pebble", () -> Blocks.RED_TERRACOTTA);
    public static final RegistryObject<Block> BLACK_TERRACOTTA_STAIRS = RegisterHelper.registerStair("black_terracotta_stairs", Blocks.BLACK_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> BLACK_TERRACOTTA_SLAB = RegisterHelper.registerSlab("black_terracotta_slab", () -> Blocks.BLACK_TERRACOTTA);
    public static final RegistryObject<Block> BLACK_TERRACOTTA_WALL = RegisterHelper.registerWall("black_terracotta_wall", () -> Blocks.BLACK_TERRACOTTA);
    public static final RegistryObject<Block> BLACK_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("black_terracotta_pressure_plate", false, MaterialColor.TERRACOTTA_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_TERRACOTTA_BUTTON = RegisterHelper.registerButton("black_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("black_terracotta_pebble", () -> Blocks.BLACK_TERRACOTTA);
    public static final RegistryObject<Block> WHITE_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("white_glazed_terracotta_stairs", Blocks.WHITE_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> WHITE_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("white_glazed_terracotta_slab", () -> Blocks.WHITE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> WHITE_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("white_glazed_terracotta_wall", () -> Blocks.WHITE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> WHITE_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("white_glazed_terracotta_pressure_plate", false, MaterialColor.SNOW, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("white_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("white_glazed_terracotta_pebble", () -> Blocks.WHITE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> ORANGE_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("orange_glazed_terracotta_stairs", Blocks.ORANGE_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> ORANGE_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("orange_glazed_terracotta_slab", () -> Blocks.ORANGE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> ORANGE_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("orange_glazed_terracotta_wall", () -> Blocks.ORANGE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> ORANGE_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("orange_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("orange_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("orange_glazed_terracotta_pebble", () -> Blocks.ORANGE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> MAGENTA_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("magenta_glazed_terracotta_stairs", Blocks.MAGENTA_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> MAGENTA_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("magenta_glazed_terracotta_slab", () -> Blocks.MAGENTA_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> MAGENTA_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("magenta_glazed_terracotta_wall", () -> Blocks.MAGENTA_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> MAGENTA_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("magenta_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_MAGENTA, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("magenta_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("magenta_glazed_terracotta_pebble", () -> Blocks.MAGENTA_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_BLUE_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("light_blue_glazed_terracotta_stairs", Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_BLUE_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("light_blue_glazed_terracotta_slab", () -> Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_BLUE_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("light_blue_glazed_terracotta_wall", () -> Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_BLUE_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_blue_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_LIGHT_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("light_blue_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("light_blue_glazed_terracotta_pebble", () -> Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> YELLOW_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("yellow_glazed_terracotta_stairs", Blocks.YELLOW_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> YELLOW_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("yellow_glazed_terracotta_slab", () -> Blocks.YELLOW_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> YELLOW_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("yellow_glazed_terracotta_wall", () -> Blocks.YELLOW_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> YELLOW_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("yellow_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_YELLOW, BlockSetType.STONE);
    public static final RegistryObject<Block> YELLOW_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("yellow_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> YELLOW_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("yellow_glazed_terracotta_pebble", () -> Blocks.YELLOW_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIME_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("lime_glazed_terracotta_stairs", Blocks.LIME_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> LIME_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("lime_glazed_terracotta_slab", () -> Blocks.LIME_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIME_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("lime_glazed_terracotta_wall", () -> Blocks.LIME_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIME_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("lime_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_LIGHT_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("lime_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("lime_glazed_terracotta_pebble", () -> Blocks.LIME_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> PINK_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("pink_glazed_terracotta_stairs", Blocks.PINK_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> PINK_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("pink_glazed_terracotta_slab", () -> Blocks.PINK_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> PINK_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("pink_glazed_terracotta_wall", () -> Blocks.PINK_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> PINK_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("pink_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_PINK, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("pink_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("pink_glazed_terracotta_pebble", () -> Blocks.PINK_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> GRAY_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("gray_glazed_terracotta_stairs", Blocks.GRAY_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> GRAY_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("gray_glazed_terracotta_slab", () -> Blocks.GRAY_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> GRAY_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("gray_glazed_terracotta_wall", () -> Blocks.GRAY_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> GRAY_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("gray_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("gray_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("gray_glazed_terracotta_pebble", () -> Blocks.GRAY_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_GRAY_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("light_gray_glazed_terracotta_stairs", Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_GRAY_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("light_gray_glazed_terracotta_slab", () -> Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_GRAY_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("light_gray_glazed_terracotta_wall", () -> Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> LIGHT_GRAY_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_gray_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_LIGHT_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("light_gray_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("light_gray_glazed_terracotta_pebble", () -> Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> CYAN_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("cyan_glazed_terracotta_stairs", Blocks.CYAN_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> CYAN_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("cyan_glazed_terracotta_slab", () -> Blocks.CYAN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> CYAN_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("cyan_glazed_terracotta_wall", () -> Blocks.CYAN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> CYAN_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("cyan_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_CYAN, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("cyan_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("cyan_glazed_terracotta_pebble", () -> Blocks.CYAN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> PURPLE_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("purple_glazed_terracotta_stairs", Blocks.PURPLE_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> PURPLE_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("purple_glazed_terracotta_slab", () -> Blocks.PURPLE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> PURPLE_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("purple_glazed_terracotta_wall", () -> Blocks.PURPLE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> PURPLE_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("purple_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_PURPLE, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("purple_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("purple_glazed_terracotta_pebble", () -> Blocks.PURPLE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BLUE_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("blue_glazed_terracotta_stairs", Blocks.BLUE_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> BLUE_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("blue_glazed_terracotta_slab", () -> Blocks.BLUE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BLUE_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("blue_glazed_terracotta_wall", () -> Blocks.BLUE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BLUE_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("blue_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("blue_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("blue_glazed_terracotta_pebble", () -> Blocks.BLUE_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BROWN_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("brown_glazed_terracotta_stairs", Blocks.BROWN_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> BROWN_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("brown_glazed_terracotta_slab", () -> Blocks.BROWN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BROWN_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("brown_glazed_terracotta_wall", () -> Blocks.BROWN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BROWN_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("brown_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_BROWN, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("brown_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("brown_glazed_terracotta_pebble", () -> Blocks.BROWN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> GREEN_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("green_glazed_terracotta_stairs", Blocks.GREEN_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> GREEN_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("green_glazed_terracotta_slab", () -> Blocks.GREEN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> GREEN_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("green_glazed_terracotta_wall", () -> Blocks.GREEN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> GREEN_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("green_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("green_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("green_glazed_terracotta_pebble", () -> Blocks.GREEN_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> RED_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("red_glazed_terracotta_stairs", Blocks.RED_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> RED_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("red_glazed_terracotta_slab", () -> Blocks.RED_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> RED_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("red_glazed_terracotta_wall", () -> Blocks.RED_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> RED_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("red_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_RED, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("red_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("red_glazed_terracotta_pebble", () -> Blocks.RED_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BLACK_GLAZED_TERRACOTTA_STAIRS = RegisterHelper.registerStair("black_glazed_terracotta_stairs", Blocks.BLACK_GLAZED_TERRACOTTA::defaultBlockState);
    public static final RegistryObject<Block> BLACK_GLAZED_TERRACOTTA_SLAB = RegisterHelper.registerSlab("black_glazed_terracotta_slab", () -> Blocks.BLACK_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BLACK_GLAZED_TERRACOTTA_WALL = RegisterHelper.registerWall("black_glazed_terracotta_wall", () -> Blocks.BLACK_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> BLACK_GLAZED_TERRACOTTA_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("black_glazed_terracotta_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_GLAZED_TERRACOTTA_BUTTON = RegisterHelper.registerButton("black_glazed_terracotta_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_GLAZED_TERRACOTTA_PEBBLE = RegisterHelper.registerPebble("black_glazed_terracotta_pebble", () -> Blocks.BLACK_GLAZED_TERRACOTTA);
    public static final RegistryObject<Block> WHITE_CONCRETE_STAIRS = RegisterHelper.registerStair("white_concrete_stairs", Blocks.WHITE_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> WHITE_CONCRETE_SLAB = RegisterHelper.registerSlab("white_concrete_slab", () -> Blocks.WHITE_CONCRETE);
    public static final RegistryObject<Block> WHITE_CONCRETE_WALL = RegisterHelper.registerWall("white_concrete_wall", () -> Blocks.WHITE_CONCRETE);
    public static final RegistryObject<Block> WHITE_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("white_concrete_pressure_plate", false, MaterialColor.SNOW, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_CONCRETE_BUTTON = RegisterHelper.registerButton("white_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> WHITE_CONCRETE_PEBBLE = RegisterHelper.registerPebble("white_concrete_pebble", () -> Blocks.WHITE_CONCRETE);
    public static final RegistryObject<Block> ORANGE_CONCRETE_STAIRS = RegisterHelper.registerStair("orange_concrete_stairs", Blocks.ORANGE_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> ORANGE_CONCRETE_SLAB = RegisterHelper.registerSlab("orange_concrete_slab", () -> Blocks.ORANGE_CONCRETE);
    public static final RegistryObject<Block> ORANGE_CONCRETE_WALL = RegisterHelper.registerWall("orange_concrete_wall", () -> Blocks.ORANGE_CONCRETE);
    public static final RegistryObject<Block> ORANGE_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("orange_concrete_pressure_plate", false, MaterialColor.COLOR_ORANGE, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_CONCRETE_BUTTON = RegisterHelper.registerButton("orange_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> ORANGE_CONCRETE_PEBBLE = RegisterHelper.registerPebble("orange_concrete_pebble", () -> Blocks.ORANGE_CONCRETE);
    public static final RegistryObject<Block> MAGENTA_CONCRETE_STAIRS = RegisterHelper.registerStair("magenta_concrete_stairs", Blocks.MAGENTA_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> MAGENTA_CONCRETE_SLAB = RegisterHelper.registerSlab("magenta_concrete_slab", () -> Blocks.MAGENTA_CONCRETE);
    public static final RegistryObject<Block> MAGENTA_CONCRETE_WALL = RegisterHelper.registerWall("magenta_concrete_wall", () -> Blocks.MAGENTA_CONCRETE);
    public static final RegistryObject<Block> MAGENTA_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("magenta_concrete_pressure_plate", false, MaterialColor.COLOR_MAGENTA, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_CONCRETE_BUTTON = RegisterHelper.registerButton("magenta_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> MAGENTA_CONCRETE_PEBBLE = RegisterHelper.registerPebble("magenta_concrete_pebble", () -> Blocks.MAGENTA_CONCRETE);
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_STAIRS = RegisterHelper.registerStair("light_blue_concrete_stairs", Blocks.LIGHT_BLUE_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_SLAB = RegisterHelper.registerSlab("light_blue_concrete_slab", () -> Blocks.LIGHT_BLUE_CONCRETE);
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_WALL = RegisterHelper.registerWall("light_blue_concrete_wall", () -> Blocks.LIGHT_BLUE_CONCRETE);
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_blue_concrete_pressure_plate", false, MaterialColor.COLOR_LIGHT_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_BUTTON = RegisterHelper.registerButton("light_blue_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_PEBBLE = RegisterHelper.registerPebble("light_blue_concrete_pebble", () -> Blocks.LIGHT_BLUE_CONCRETE);
    public static final RegistryObject<Block> YELLOW_CONCRETE_STAIRS = RegisterHelper.registerStair("yellow_concrete_stairs", Blocks.YELLOW_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> YELLOW_CONCRETE_SLAB = RegisterHelper.registerSlab("yellow_concrete_slab", () -> Blocks.YELLOW_CONCRETE);
    public static final RegistryObject<Block> YELLOW_CONCRETE_WALL = RegisterHelper.registerWall("yellow_concrete_wall", () -> Blocks.YELLOW_CONCRETE);
    public static final RegistryObject<Block> YELLOW_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("yellow_concrete_pressure_plate", false, MaterialColor.COLOR_YELLOW, BlockSetType.STONE);
    public static final RegistryObject<Block> YELLOW_CONCRETE_BUTTON = RegisterHelper.registerButton("yellow_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> YELLOW_CONCRETE_PEBBLE = RegisterHelper.registerPebble("yellow_concrete_pebble", () -> Blocks.YELLOW_CONCRETE);
    public static final RegistryObject<Block> LIME_CONCRETE_STAIRS = RegisterHelper.registerStair("lime_concrete_stairs", Blocks.LIME_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> LIME_CONCRETE_SLAB = RegisterHelper.registerSlab("lime_concrete_slab", () -> Blocks.LIME_CONCRETE);
    public static final RegistryObject<Block> LIME_CONCRETE_WALL = RegisterHelper.registerWall("lime_concrete_wall", () -> Blocks.LIME_CONCRETE);
    public static final RegistryObject<Block> LIME_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("lime_concrete_pressure_plate", false, MaterialColor.COLOR_LIGHT_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_CONCRETE_BUTTON = RegisterHelper.registerButton("lime_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIME_CONCRETE_PEBBLE = RegisterHelper.registerPebble("lime_concrete_pebble", () -> Blocks.LIME_CONCRETE);
    public static final RegistryObject<Block> PINK_CONCRETE_STAIRS = RegisterHelper.registerStair("pink_concrete_stairs", Blocks.PINK_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> PINK_CONCRETE_SLAB = RegisterHelper.registerSlab("pink_concrete_slab", () -> Blocks.PINK_CONCRETE);
    public static final RegistryObject<Block> PINK_CONCRETE_WALL = RegisterHelper.registerWall("pink_concrete_wall", () -> Blocks.PINK_CONCRETE);
    public static final RegistryObject<Block> PINK_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("pink_concrete_pressure_plate", false, MaterialColor.COLOR_PINK, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_CONCRETE_BUTTON = RegisterHelper.registerButton("pink_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PINK_CONCRETE_PEBBLE = RegisterHelper.registerPebble("pink_concrete_pebble", () -> Blocks.PINK_CONCRETE);
    public static final RegistryObject<Block> GRAY_CONCRETE_STAIRS = RegisterHelper.registerStair("gray_concrete_stairs", Blocks.GRAY_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> GRAY_CONCRETE_SLAB = RegisterHelper.registerSlab("gray_concrete_slab", () -> Blocks.GRAY_CONCRETE);
    public static final RegistryObject<Block> GRAY_CONCRETE_WALL = RegisterHelper.registerWall("gray_concrete_wall", () -> Blocks.GRAY_CONCRETE);
    public static final RegistryObject<Block> GRAY_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("gray_concrete_pressure_plate", false, MaterialColor.COLOR_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_CONCRETE_BUTTON = RegisterHelper.registerButton("gray_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GRAY_CONCRETE_PEBBLE = RegisterHelper.registerPebble("gray_concrete_pebble", () -> Blocks.GRAY_CONCRETE);
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_STAIRS = RegisterHelper.registerStair("light_gray_concrete_stairs", Blocks.LIGHT_GRAY_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_SLAB = RegisterHelper.registerSlab("light_gray_concrete_slab", () -> Blocks.LIGHT_GRAY_CONCRETE);
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_WALL = RegisterHelper.registerWall("light_gray_concrete_wall", () -> Blocks.LIGHT_GRAY_CONCRETE);
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("light_gray_concrete_pressure_plate", false, MaterialColor.COLOR_LIGHT_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_BUTTON = RegisterHelper.registerButton("light_gray_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_PEBBLE = RegisterHelper.registerPebble("light_gray_concrete_pebble", () -> Blocks.LIGHT_GRAY_CONCRETE);
    public static final RegistryObject<Block> CYAN_CONCRETE_STAIRS = RegisterHelper.registerStair("cyan_concrete_stairs", Blocks.CYAN_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> CYAN_CONCRETE_SLAB = RegisterHelper.registerSlab("cyan_concrete_slab", () -> Blocks.CYAN_CONCRETE);
    public static final RegistryObject<Block> CYAN_CONCRETE_WALL = RegisterHelper.registerWall("cyan_concrete_wall", () -> Blocks.CYAN_CONCRETE);
    public static final RegistryObject<Block> CYAN_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("cyan_concrete_pressure_plate", false, MaterialColor.COLOR_CYAN, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_CONCRETE_BUTTON = RegisterHelper.registerButton("cyan_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> CYAN_CONCRETE_PEBBLE = RegisterHelper.registerPebble("cyan_concrete_pebble", () -> Blocks.CYAN_CONCRETE);
    public static final RegistryObject<Block> PURPLE_CONCRETE_STAIRS = RegisterHelper.registerStair("purple_concrete_stairs", Blocks.PURPLE_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> PURPLE_CONCRETE_SLAB = RegisterHelper.registerSlab("purple_concrete_slab", () -> Blocks.PURPLE_CONCRETE);
    public static final RegistryObject<Block> PURPLE_CONCRETE_WALL = RegisterHelper.registerWall("purple_concrete_wall", () -> Blocks.PURPLE_CONCRETE);
    public static final RegistryObject<Block> PURPLE_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("purple_concrete_pressure_plate", false, MaterialColor.COLOR_PURPLE, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_CONCRETE_BUTTON = RegisterHelper.registerButton("purple_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> PURPLE_CONCRETE_PEBBLE = RegisterHelper.registerPebble("purple_concrete_pebble", () -> Blocks.PURPLE_CONCRETE);
    public static final RegistryObject<Block> BLUE_CONCRETE_STAIRS = RegisterHelper.registerStair("blue_concrete_stairs", Blocks.BLUE_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> BLUE_CONCRETE_SLAB = RegisterHelper.registerSlab("blue_concrete_slab", () -> Blocks.BLUE_CONCRETE);
    public static final RegistryObject<Block> BLUE_CONCRETE_WALL = RegisterHelper.registerWall("blue_concrete_wall", () -> Blocks.BLUE_CONCRETE);
    public static final RegistryObject<Block> BLUE_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("blue_concrete_pressure_plate", false, MaterialColor.COLOR_BLUE, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_CONCRETE_BUTTON = RegisterHelper.registerButton("blue_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_CONCRETE_PEBBLE = RegisterHelper.registerPebble("blue_concrete_pebble", () -> Blocks.BLUE_CONCRETE);
    public static final RegistryObject<Block> BROWN_CONCRETE_STAIRS = RegisterHelper.registerStair("brown_concrete_stairs", Blocks.BROWN_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> BROWN_CONCRETE_SLAB = RegisterHelper.registerSlab("brown_concrete_slab", () -> Blocks.BROWN_CONCRETE);
    public static final RegistryObject<Block> BROWN_CONCRETE_WALL = RegisterHelper.registerWall("brown_concrete_wall", () -> Blocks.BROWN_CONCRETE);
    public static final RegistryObject<Block> BROWN_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("brown_concrete_pressure_plate", false, MaterialColor.COLOR_BROWN, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_CONCRETE_BUTTON = RegisterHelper.registerButton("brown_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BROWN_CONCRETE_PEBBLE = RegisterHelper.registerPebble("brown_concrete_pebble", () -> Blocks.BROWN_CONCRETE);
    public static final RegistryObject<Block> GREEN_CONCRETE_STAIRS = RegisterHelper.registerStair("green_concrete_stairs", Blocks.GREEN_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> GREEN_CONCRETE_SLAB = RegisterHelper.registerSlab("green_concrete_slab", () -> Blocks.GREEN_CONCRETE);
    public static final RegistryObject<Block> GREEN_CONCRETE_WALL = RegisterHelper.registerWall("green_concrete_wall", () -> Blocks.GREEN_CONCRETE);
    public static final RegistryObject<Block> GREEN_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("green_concrete_pressure_plate", false, MaterialColor.COLOR_GREEN, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_CONCRETE_BUTTON = RegisterHelper.registerButton("green_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GREEN_CONCRETE_PEBBLE = RegisterHelper.registerPebble("green_concrete_pebble", () -> Blocks.GREEN_CONCRETE);
    public static final RegistryObject<Block> RED_CONCRETE_STAIRS = RegisterHelper.registerStair("red_concrete_stairs", Blocks.RED_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> RED_CONCRETE_SLAB = RegisterHelper.registerSlab("red_concrete_slab", () -> Blocks.RED_CONCRETE);
    public static final RegistryObject<Block> RED_CONCRETE_WALL = RegisterHelper.registerWall("red_concrete_wall", () -> Blocks.RED_CONCRETE);
    public static final RegistryObject<Block> RED_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("red_concrete_pressure_plate", false, MaterialColor.COLOR_RED, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_CONCRETE_BUTTON = RegisterHelper.registerButton("red_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> RED_CONCRETE_PEBBLE = RegisterHelper.registerPebble("red_concrete_pebble", () -> Blocks.RED_CONCRETE);
    public static final RegistryObject<Block> BLACK_CONCRETE_STAIRS = RegisterHelper.registerStair("black_concrete_stairs", Blocks.BLACK_CONCRETE::defaultBlockState);
    public static final RegistryObject<Block> BLACK_CONCRETE_SLAB = RegisterHelper.registerSlab("black_concrete_slab", () -> Blocks.BLACK_CONCRETE);
    public static final RegistryObject<Block> BLACK_CONCRETE_WALL = RegisterHelper.registerWall("black_concrete_wall", () -> Blocks.BLACK_CONCRETE);
    public static final RegistryObject<Block> BLACK_CONCRETE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("black_concrete_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_CONCRETE_BUTTON = RegisterHelper.registerButton("black_concrete_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLACK_CONCRETE_PEBBLE = RegisterHelper.registerPebble("black_concrete_pebble", () -> Blocks.BLACK_CONCRETE);
    public static final RegistryObject<Block> CALCITE_STAIRS = RegisterHelper.registerStair("calcite_stairs", Blocks.CALCITE::defaultBlockState);
    public static final RegistryObject<Block> CALCITE_SLAB = RegisterHelper.registerSlab("calcite_slab", () -> Blocks.CALCITE);
    public static final RegistryObject<Block> CALCITE_WALL = RegisterHelper.registerWall("calcite_wall", () -> Blocks.CALCITE);
    public static final RegistryObject<Block> CALCITE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("calcite_pressure_plate", false, MaterialColor.TERRACOTTA_WHITE, BlockSetType.STONE);
    public static final RegistryObject<Block> CALCITE_BUTTON = RegisterHelper.registerButton("calcite_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> CALCITE_PEBBLE = RegisterHelper.registerPebble("calcite_pebble", () -> Blocks.CALCITE);
    public static final RegistryObject<Block> TUFF_STAIRS = RegisterHelper.registerStair("tuff_stairs", Blocks.TUFF::defaultBlockState);
    public static final RegistryObject<Block> TUFF_SLAB = RegisterHelper.registerSlab("tuff_slab", () -> Blocks.TUFF);
    public static final RegistryObject<Block> TUFF_WALL = RegisterHelper.registerWall("tuff_wall", () -> Blocks.TUFF);
    public static final RegistryObject<Block> TUFF_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("tuff_pressure_plate", false, MaterialColor.TERRACOTTA_GRAY, BlockSetType.STONE);
    public static final RegistryObject<Block> TUFF_BUTTON = RegisterHelper.registerButton("tuff_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> TUFF_PEBBLE = RegisterHelper.registerPebble("tuff_pebble", () -> Blocks.TUFF);
    public static final RegistryObject<Block> DRIPSTONE_STAIRS = RegisterHelper.registerStair("dripstone_stairs", Blocks.DRIPSTONE_BLOCK::defaultBlockState);
    public static final RegistryObject<Block> DRIPSTONE_SLAB = RegisterHelper.registerSlab("dripstone_slab", () -> Blocks.DRIPSTONE_BLOCK);
    public static final RegistryObject<Block> DRIPSTONE_WALL = RegisterHelper.registerWall("dripstone_wall", () -> Blocks.DRIPSTONE_BLOCK);
    public static final RegistryObject<Block> DRIPSTONE_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("dripstone_pressure_plate", false, MaterialColor.TERRACOTTA_BROWN, BlockSetType.STONE);
    public static final RegistryObject<Block> DRIPSTONE_BUTTON = RegisterHelper.registerButton("dripstone_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> DRIPSTONE_PEBBLE = RegisterHelper.registerPebble("dripstone_pebble", () -> Blocks.DRIPSTONE_BLOCK);
    public static final RegistryObject<Block> OBSIDIAN_STAIRS = RegisterHelper.registerStair("obsidian_stairs", Blocks.OBSIDIAN::defaultBlockState);
    public static final RegistryObject<Block> OBSIDIAN_SLAB = RegisterHelper.registerSlab("obsidian_slab", () -> Blocks.OBSIDIAN);
    public static final RegistryObject<Block> OBSIDIAN_WALL = RegisterHelper.registerWall("obsidian_wall", () -> Blocks.OBSIDIAN);
    public static final RegistryObject<Block> OBSIDIAN_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("obsidian_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> OBSIDIAN_BUTTON = RegisterHelper.registerButton("obsidian_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> OBSIDIAN_PEBBLE = RegisterHelper.registerPebble("obsidian_pebble", () -> Blocks.OBSIDIAN);
    public static final RegistryObject<Block> CRYING_OBSIDIAN_STAIRS = RegisterHelper.registerBlock("crying_obsidian_stairs", CryingObsidianStairs::new);
    public static final RegistryObject<Block> CRYING_OBSIDIAN_SLAB = RegisterHelper.registerBlock("crying_obsidian_slab", CryingObsidianSlab::new);
    public static final RegistryObject<Block> CRYING_OBSIDIAN_WALL = RegisterHelper.registerBlock("crying_obsidian_wall", CryingObsidianWall::new);
    public static final RegistryObject<Block> CRYING_OBSIDIAN_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("crying_obsidian_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> CRYING_OBSIDIAN_BUTTON = RegisterHelper.registerButton("crying_obsidian_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> CRYING_OBSIDIAN_PEBBLE = RegisterHelper.registerPebble("crying_obsidian_pebble", () -> Blocks.CRYING_OBSIDIAN);
    public static final RegistryObject<Block> GLASS_STAIRS = RegisterHelper.registerStair("glass_stairs", Blocks.GLASS::defaultBlockState);
    public static final RegistryObject<Block> GLASS_SLAB = RegisterHelper.registerSlab("glass_slab", () -> Blocks.GLASS);
    public static final RegistryObject<Block> GLASS_WALL = RegisterHelper.registerGlassWall("glass_wall", () -> Blocks.GLASS);
    public static final RegistryObject<Block> WHITE_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("white_stained_glass_stairs", Blocks.WHITE_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> WHITE_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("white_stained_glass_slab", () -> Blocks.WHITE_STAINED_GLASS);
    public static final RegistryObject<Block> WHITE_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("white_stained_glass_wall", () -> Blocks.WHITE_STAINED_GLASS);
    public static final RegistryObject<Block> ORANGE_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("orange_stained_glass_stairs", Blocks.ORANGE_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> ORANGE_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("orange_stained_glass_slab", () -> Blocks.ORANGE_STAINED_GLASS);
    public static final RegistryObject<Block> ORANGE_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("orange_stained_glass_wall", () -> Blocks.ORANGE_STAINED_GLASS);
    public static final RegistryObject<Block> MAGENTA_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("magenta_stained_glass_stairs", Blocks.MAGENTA_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> MAGENTA_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("magenta_stained_glass_slab", () -> Blocks.MAGENTA_STAINED_GLASS);
    public static final RegistryObject<Block> MAGENTA_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("magenta_stained_glass_wall", () -> Blocks.MAGENTA_STAINED_GLASS);
    public static final RegistryObject<Block> LIGHT_BLUE_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("light_blue_stained_glass_stairs", Blocks.LIGHT_BLUE_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_BLUE_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("light_blue_stained_glass_slab", () -> Blocks.LIGHT_BLUE_STAINED_GLASS);
    public static final RegistryObject<Block> LIGHT_BLUE_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("light_blue_stained_glass_wall", () -> Blocks.LIGHT_BLUE_STAINED_GLASS);
    public static final RegistryObject<Block> YELLOW_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("yellow_stained_glass_stairs", Blocks.YELLOW_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> YELLOW_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("yellow_stained_glass_slab", () -> Blocks.YELLOW_STAINED_GLASS);
    public static final RegistryObject<Block> YELLOW_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("yellow_stained_glass_wall", () -> Blocks.YELLOW_STAINED_GLASS);
    public static final RegistryObject<Block> LIME_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("lime_stained_glass_stairs", Blocks.LIME_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> LIME_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("lime_stained_glass_slab", () -> Blocks.LIME_STAINED_GLASS);
    public static final RegistryObject<Block> LIME_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("lime_stained_glass_wall", () -> Blocks.LIME_STAINED_GLASS);
    public static final RegistryObject<Block> PINK_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("pink_stained_glass_stairs", Blocks.PINK_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> PINK_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("pink_stained_glass_slab", () -> Blocks.PINK_STAINED_GLASS);
    public static final RegistryObject<Block> PINK_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("pink_stained_glass_wall", () -> Blocks.PINK_STAINED_GLASS);
    public static final RegistryObject<Block> GRAY_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("gray_stained_glass_stairs", Blocks.GRAY_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> GRAY_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("gray_stained_glass_slab", () -> Blocks.GRAY_STAINED_GLASS);
    public static final RegistryObject<Block> GRAY_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("gray_stained_glass_wall", () -> Blocks.GRAY_STAINED_GLASS);
    public static final RegistryObject<Block> LIGHT_GRAY_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("light_gray_stained_glass_stairs", Blocks.LIGHT_GRAY_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> LIGHT_GRAY_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("light_gray_stained_glass_slab", () -> Blocks.LIGHT_GRAY_STAINED_GLASS);
    public static final RegistryObject<Block> LIGHT_GRAY_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("light_gray_stained_glass_wall", () -> Blocks.LIGHT_GRAY_STAINED_GLASS);
    public static final RegistryObject<Block> CYAN_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("cyan_stained_glass_stairs", Blocks.CYAN_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> CYAN_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("cyan_stained_glass_slab", () -> Blocks.CYAN_STAINED_GLASS);
    public static final RegistryObject<Block> CYAN_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("cyan_stained_glass_wall", () -> Blocks.CYAN_STAINED_GLASS);
    public static final RegistryObject<Block> PURPLE_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("purple_stained_glass_stairs", Blocks.PURPLE_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> PURPLE_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("purple_stained_glass_slab", () -> Blocks.PURPLE_STAINED_GLASS);
    public static final RegistryObject<Block> PURPLE_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("purple_stained_glass_wall", () -> Blocks.PURPLE_STAINED_GLASS);
    public static final RegistryObject<Block> BLUE_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("blue_stained_glass_stairs", Blocks.BLUE_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> BLUE_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("blue_stained_glass_slab", () -> Blocks.BLUE_STAINED_GLASS);
    public static final RegistryObject<Block> BLUE_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("blue_stained_glass_wall", () -> Blocks.BLUE_STAINED_GLASS);
    public static final RegistryObject<Block> BROWN_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("brown_stained_glass_stairs", Blocks.BROWN_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> BROWN_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("brown_stained_glass_slab", () -> Blocks.BROWN_STAINED_GLASS);
    public static final RegistryObject<Block> BROWN_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("brown_stained_glass_wall", () -> Blocks.BROWN_STAINED_GLASS);
    public static final RegistryObject<Block> GREEN_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("green_stained_glass_stairs", Blocks.GREEN_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> GREEN_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("green_stained_glass_slab", () -> Blocks.GREEN_STAINED_GLASS);
    public static final RegistryObject<Block> GREEN_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("green_stained_glass_wall", () -> Blocks.GREEN_STAINED_GLASS);
    public static final RegistryObject<Block> RED_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("red_stained_glass_stairs", Blocks.RED_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> RED_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("red_stained_glass_slab", () -> Blocks.RED_STAINED_GLASS);
    public static final RegistryObject<Block> RED_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("red_stained_glass_wall", () -> Blocks.RED_STAINED_GLASS);
    public static final RegistryObject<Block> BLACK_STAINED_GLASS_STAIRS = RegisterHelper.registerStair("black_stained_glass_stairs", Blocks.BLACK_STAINED_GLASS::defaultBlockState);
    public static final RegistryObject<Block> BLACK_STAINED_GLASS_SLAB = RegisterHelper.registerSlab("black_stained_glass_slab", () -> Blocks.BLACK_STAINED_GLASS);
    public static final RegistryObject<Block> BLACK_STAINED_GLASS_WALL = RegisterHelper.registerGlassWall("black_stained_glass_wall", () -> Blocks.BLACK_STAINED_GLASS);
    public static final RegistryObject<Block> WHITE_WOOL_STAIRS = RegisterHelper.registerStair("white_wool_stairs", Blocks.WHITE_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.WHITE_WOOL));
    public static final RegistryObject<Block> WHITE_WOOL_SLAB = RegisterHelper.registerSlab("white_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.WHITE_WOOL));
    public static final RegistryObject<Block> WHITE_WOOL_WALL = RegisterHelper.registerWall("white_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.WHITE_WOOL));
    public static final RegistryObject<Block> ORANGE_WOOL_STAIRS = RegisterHelper.registerStair("orange_wool_stairs", Blocks.ORANGE_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.ORANGE_WOOL));
    public static final RegistryObject<Block> ORANGE_WOOL_SLAB = RegisterHelper.registerSlab("orange_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.ORANGE_WOOL));
    public static final RegistryObject<Block> ORANGE_WOOL_WALL = RegisterHelper.registerWall("orange_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.ORANGE_WOOL));
    public static final RegistryObject<Block> MAGENTA_WOOL_STAIRS = RegisterHelper.registerStair("magenta_wool_stairs", Blocks.MAGENTA_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.MAGENTA_WOOL));
    public static final RegistryObject<Block> MAGENTA_WOOL_SLAB = RegisterHelper.registerSlab("magenta_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.MAGENTA_WOOL));
    public static final RegistryObject<Block> MAGENTA_WOOL_WALL = RegisterHelper.registerWall("magenta_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.MAGENTA_WOOL));
    public static final RegistryObject<Block> LIGHT_BLUE_WOOL_STAIRS = RegisterHelper.registerStair("light_blue_wool_stairs", Blocks.LIGHT_BLUE_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.LIGHT_BLUE_WOOL));
    public static final RegistryObject<Block> LIGHT_BLUE_WOOL_SLAB = RegisterHelper.registerSlab("light_blue_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.LIGHT_BLUE_WOOL));
    public static final RegistryObject<Block> LIGHT_BLUE_WOOL_WALL = RegisterHelper.registerWall("light_blue_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.LIGHT_BLUE_WOOL));
    public static final RegistryObject<Block> YELLOW_WOOL_STAIRS = RegisterHelper.registerStair("yellow_wool_stairs", Blocks.YELLOW_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.YELLOW_WOOL));
    public static final RegistryObject<Block> YELLOW_WOOL_SLAB = RegisterHelper.registerSlab("yellow_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.YELLOW_WOOL));
    public static final RegistryObject<Block> YELLOW_WOOL_WALL = RegisterHelper.registerWall("yellow_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.YELLOW_WOOL));
    public static final RegistryObject<Block> LIME_WOOL_STAIRS = RegisterHelper.registerStair("lime_wool_stairs", Blocks.LIME_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.LIME_WOOL));
    public static final RegistryObject<Block> LIME_WOOL_SLAB = RegisterHelper.registerSlab("lime_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.LIME_WOOL));
    public static final RegistryObject<Block> LIME_WOOL_WALL = RegisterHelper.registerWall("lime_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.LIME_WOOL));
    public static final RegistryObject<Block> PINK_WOOL_STAIRS = RegisterHelper.registerStair("pink_wool_stairs", Blocks.PINK_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.PINK_WOOL));
    public static final RegistryObject<Block> PINK_WOOL_SLAB = RegisterHelper.registerSlab("pink_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.PINK_WOOL));
    public static final RegistryObject<Block> PINK_WOOL_WALL = RegisterHelper.registerWall("pink_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.PINK_WOOL));
    public static final RegistryObject<Block> GRAY_WOOL_STAIRS = RegisterHelper.registerStair("gray_wool_stairs", Blocks.GRAY_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.GRAY_WOOL));
    public static final RegistryObject<Block> GRAY_WOOL_SLAB = RegisterHelper.registerSlab("gray_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.GRAY_WOOL));
    public static final RegistryObject<Block> GRAY_WOOL_WALL = RegisterHelper.registerWall("gray_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.GRAY_WOOL));
    public static final RegistryObject<Block> LIGHT_GRAY_WOOL_STAIRS = RegisterHelper.registerStair("light_gray_wool_stairs", Blocks.LIGHT_GRAY_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.LIGHT_GRAY_WOOL));
    public static final RegistryObject<Block> LIGHT_GRAY_WOOL_SLAB = RegisterHelper.registerSlab("light_gray_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.LIGHT_GRAY_WOOL));
    public static final RegistryObject<Block> LIGHT_GRAY_WOOL_WALL = RegisterHelper.registerWall("light_gray_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.LIGHT_GRAY_WOOL));
    public static final RegistryObject<Block> CYAN_WOOL_STAIRS = RegisterHelper.registerStair("cyan_wool_stairs", Blocks.CYAN_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.CYAN_WOOL));
    public static final RegistryObject<Block> CYAN_WOOL_SLAB = RegisterHelper.registerSlab("cyan_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.CYAN_WOOL));
    public static final RegistryObject<Block> CYAN_WOOL_WALL = RegisterHelper.registerWall("cyan_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.CYAN_WOOL));
    public static final RegistryObject<Block> PURPLE_WOOL_STAIRS = RegisterHelper.registerStair("purple_wool_stairs", Blocks.PURPLE_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.PURPLE_WOOL));
    public static final RegistryObject<Block> PURPLE_WOOL_SLAB = RegisterHelper.registerSlab("purple_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.PURPLE_WOOL));
    public static final RegistryObject<Block> PURPLE_WOOL_WALL = RegisterHelper.registerWall("purple_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.PURPLE_WOOL));
    public static final RegistryObject<Block> BLUE_WOOL_STAIRS = RegisterHelper.registerStair("blue_wool_stairs", Blocks.BLUE_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.BLUE_WOOL));
    public static final RegistryObject<Block> BLUE_WOOL_SLAB = RegisterHelper.registerSlab("blue_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.BLUE_WOOL));
    public static final RegistryObject<Block> BLUE_WOOL_WALL = RegisterHelper.registerWall("blue_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.BLUE_WOOL));
    public static final RegistryObject<Block> BROWN_WOOL_STAIRS = RegisterHelper.registerStair("brown_wool_stairs", Blocks.BROWN_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.BROWN_WOOL));
    public static final RegistryObject<Block> BROWN_WOOL_SLAB = RegisterHelper.registerSlab("brown_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.BROWN_WOOL));
    public static final RegistryObject<Block> BROWN_WOOL_WALL = RegisterHelper.registerWall("brown_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.BROWN_WOOL));
    public static final RegistryObject<Block> GREEN_WOOL_STAIRS = RegisterHelper.registerStair("green_wool_stairs", Blocks.GREEN_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.GREEN_WOOL));
    public static final RegistryObject<Block> GREEN_WOOL_SLAB = RegisterHelper.registerSlab("green_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.GREEN_WOOL));
    public static final RegistryObject<Block> GREEN_WOOL_WALL = RegisterHelper.registerWall("green_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.GREEN_WOOL));
    public static final RegistryObject<Block> RED_WOOL_STAIRS = RegisterHelper.registerStair("red_wool_stairs", Blocks.RED_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.RED_WOOL));
    public static final RegistryObject<Block> RED_WOOL_SLAB = RegisterHelper.registerSlab("red_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.RED_WOOL));
    public static final RegistryObject<Block> RED_WOOL_WALL = RegisterHelper.registerWall("red_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.RED_WOOL));
    public static final RegistryObject<Block> BLACK_WOOL_STAIRS = RegisterHelper.registerStair("black_wool_stairs", Blocks.BLACK_WOOL::defaultBlockState, () -> PropertyHelper.copyFromBlock(Blocks.BLACK_WOOL));
    public static final RegistryObject<Block> BLACK_WOOL_SLAB = RegisterHelper.registerSlab("black_wool_slab", () -> PropertyHelper.copyFromBlock(Blocks.BLACK_WOOL));
    public static final RegistryObject<Block> BLACK_WOOL_WALL = RegisterHelper.registerWall("black_wool_wall", () -> PropertyHelper.copyFromBlock(Blocks.BLACK_WOOL));
    public static final RegistryObject<Block> HORIZONTAL_GLASS_PANE = RegisterHelper.registerBlockWithoutBlockItem("horizontal_glass_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.GLASS)));
    public static final RegistryObject<Block> WHITE_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("white_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.WHITE_STAINED_GLASS)));
    public static final RegistryObject<Block> ORANGE_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("orange_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.ORANGE_STAINED_GLASS)));
    public static final RegistryObject<Block> MAGENTA_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("magenta_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.MAGENTA_STAINED_GLASS)));
    public static final RegistryObject<Block> LIGHT_BLUE_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("light_blue_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.LIGHT_BLUE_STAINED_GLASS)));
    public static final RegistryObject<Block> YELLOW_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("yellow_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.YELLOW_STAINED_GLASS)));
    public static final RegistryObject<Block> LIME_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("lime_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.LIME_STAINED_GLASS)));
    public static final RegistryObject<Block> PINK_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("pink_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.PINK_STAINED_GLASS)));
    public static final RegistryObject<Block> GRAY_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("gray_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.GRAY_STAINED_GLASS)));
    public static final RegistryObject<Block> LIGHT_GRAY_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("light_gray_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.LIGHT_GRAY_STAINED_GLASS)));
    public static final RegistryObject<Block> CYAN_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("cyan_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.CYAN_STAINED_GLASS)));
    public static final RegistryObject<Block> PURPLE_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("purple_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.PURPLE_STAINED_GLASS)));
    public static final RegistryObject<Block> BLUE_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("blue_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.BLUE_STAINED_GLASS)));
    public static final RegistryObject<Block> BROWN_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("brown_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.BROWN_STAINED_GLASS)));
    public static final RegistryObject<Block> GREEN_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("green_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.GREEN_STAINED_GLASS)));
    public static final RegistryObject<Block> RED_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("red_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.RED_STAINED_GLASS)));
    public static final RegistryObject<Block> BLACK_STAINED_GLASS_HORIZONTAL_PANE = RegisterHelper.registerBlockWithoutBlockItem("black_stained_glass_horizontal_pane", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.BLACK_STAINED_GLASS)));
    public static final RegistryObject<Block> GOLD_GRATE = RegisterHelper.registerBlockWithoutBlockItem("gold_grate", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(GOLD_BARS.get())));
    public static final RegistryObject<Block> IRON_GRATE = RegisterHelper.registerBlockWithoutBlockItem("iron_grate", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(Blocks.IRON_BARS)));
    public static final RegistryObject<Block> OXIDIZED_COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("oxidized_copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(OXIDIZED_COPPER_BARS.get()), WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WEATHERED_COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("weathered_copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(WEATHERED_COPPER_BARS.get()), WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> EXPOSED_COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("exposed_copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(EXPOSED_COPPER_BARS.get()), WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(COPPER_BARS.get()), WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> WAXED_OXIDIZED_COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("waxed_oxidized_copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(WAXED_OXIDIZED_COPPER_BARS.get()), WeatheringCopper.WeatherState.OXIDIZED));
    public static final RegistryObject<Block> WAXED_WEATHERED_COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("waxed_weathered_copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(WAXED_WEATHERED_COPPER_BARS.get()), WeatheringCopper.WeatherState.WEATHERED));
    public static final RegistryObject<Block> WAXED_EXPOSED_COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("waxed_exposed_copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(WAXED_EXPOSED_COPPER_BARS.get()), WeatheringCopper.WeatherState.EXPOSED));
    public static final RegistryObject<Block> WAXED_COPPER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("waxed_copper_grate", () -> new WeatheringHorizontalPaneBlock(PropertyHelper.copyFromBlock(WAXED_COPPER_BARS.get()), WeatheringCopper.WeatherState.UNAFFECTED));
    public static final RegistryObject<Block> NETHERITE_GRATE = RegisterHelper.registerBlockWithoutBlockItem("netherite_grate", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(NETHERITE_BARS.get())));
    public static final RegistryObject<Block> SILVER_GRATE = RegisterHelper.registerBlockWithoutBlockItem("silver_grate", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(SILVER_BARS.get())));
    public static final RegistryObject<Block> ALUMINUM_GRATE = RegisterHelper.registerBlockWithoutBlockItem("aluminum_grate", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(ALUMINUM_BARS.get())));
    public static final RegistryObject<Block> BRONZE_GRATE = RegisterHelper.registerBlockWithoutBlockItem("bronze_grate", () -> new HorizontalPaneBlock(PropertyHelper.copyFromBlock(BRONZE_BARS.get())));
    public static final RegistryObject<Block> GLOWING_OBSIDIAN = RegisterHelper.registerUnmovableBlock("glowing_obsidian", () -> PropertyHelper.copyFromBlock(Blocks.OBSIDIAN).lightLevel(state -> 15));
    public static final RegistryObject<Block> GLOWING_OBSIDIAN_STAIRS = RegisterHelper.registerStair("glowing_obsidian_stairs", () -> GLOWING_OBSIDIAN.get().defaultBlockState());
    public static final RegistryObject<Block> GLOWING_OBSIDIAN_SLAB = RegisterHelper.registerSlab("glowing_obsidian_slab", GLOWING_OBSIDIAN);
    public static final RegistryObject<Block> GLOWING_OBSIDIAN_WALL = RegisterHelper.registerWall("glowing_obsidian_wall", GLOWING_OBSIDIAN);
    public static final RegistryObject<Block> GLOWING_OBSIDIAN_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("glowing_obsidian_pressure_plate", false, MaterialColor.COLOR_BLACK, BlockSetType.STONE);
    public static final RegistryObject<Block> GLOWING_OBSIDIAN_BUTTON = RegisterHelper.registerButton("glowing_obsidian_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> GLOWING_OBSIDIAN_PEBBLE = RegisterHelper.registerPebble("glowing_obsidian_pebble", GLOWING_OBSIDIAN);
    public static final RegistryObject<Block> ROPE = RegisterHelper.registerBlock("rope", RopeBlock::new);
    public static final RegistryObject<Block> ROPE_TAIL = RegisterHelper.registerBlockWithoutBlockItem("rope_tail", RopeTailBlock::new);
    public static final RegistryObject<Block> WARPED_WART = RegisterHelper.registerBlockWithoutBlockItem("warped_wart", WarpedWartBlock::new);
    public static final RegistryObject<Block> POTTED_WARPED_WART = RegisterHelper.registerFlowerPot("potted_warped_wart", WARPED_WART);
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS = RegisterHelper.registerBlock("blue_nether_bricks", () -> PropertyHelper.copyFromBlock(Blocks.NETHER_BRICKS));
    public static final RegistryObject<Block> CRACKED_BLUE_NETHER_BRICKS = RegisterHelper.registerBlock("cracked_blue_nether_bricks", () -> PropertyHelper.copyFromBlock(BLUE_NETHER_BRICKS.get()));
    public static final RegistryObject<Block> CHISELED_BLUE_NETHER_BRICKS = RegisterHelper.registerBlock("chiseled_blue_nether_bricks", () -> PropertyHelper.copyFromBlock(BLUE_NETHER_BRICKS.get()));
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS_STAIRS = RegisterHelper.registerStair("blue_nether_bricks_stairs", () -> BLUE_NETHER_BRICKS.get().defaultBlockState());
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS_SLAB = RegisterHelper.registerSlab("blue_nether_bricks_slab", BLUE_NETHER_BRICKS);
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS_WALL = RegisterHelper.registerWall("blue_nether_bricks_wall", BLUE_NETHER_BRICKS);
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS_PRESSURE_PLATE = RegisterHelper.registerPressurePlate("blue_nether_bricks_pressure_plate", false, MaterialColor.WARPED_WART_BLOCK, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS_BUTTON = RegisterHelper.registerButton("blue_nether_bricks_button", false, BlockSetType.STONE);
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS_PEBBLE = RegisterHelper.registerPebble("blue_nether_bricks_pebble", BLUE_NETHER_BRICKS);
    public static final RegistryObject<Block> HOLLOW_OAK_LOG = RegisterHelper.registerBlock("hollow_oak_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.OAK_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_OAK_LOG = RegisterHelper.registerBlock("hollow_stripped_oak_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_OAK_LOG)));
    public static final RegistryObject<Block> OAK_LEAVES_CARPET = RegisterHelper.registerBlock("oak_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> OAK_BUSH = RegisterHelper.registerBlock("oak_bush", () -> new TreeBushBlock(OakTreeGrower::new));
    public static final RegistryObject<Block> POTTED_OAK_BUSH = RegisterHelper.registerFlowerPot("potted_oak_bush", OAK_BUSH);
    public static final RegistryObject<Block> OAK_BARREL = RegisterHelper.registerBlock("oak_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> HOLLOW_SPRUCE_LOG = RegisterHelper.registerBlock("hollow_spruce_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.SPRUCE_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_SPRUCE_LOG = RegisterHelper.registerBlock("hollow_stripped_spruce_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_SPRUCE_LOG)));
    public static final RegistryObject<Block> SPRUCE_LEAVES_CARPET = RegisterHelper.registerBlock("spruce_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.SPRUCE_LEAVES)));
    public static final RegistryObject<Block> SPRUCE_CHEST = RegisterHelper.registerChest("spruce_chest", () -> MWBlockEntityTypes.SPRUCE_CHEST.get(), WoodType.SPRUCE);
    public static final RegistryObject<Block> SPRUCE_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("spruce_trapped_chest", () -> MWBlockEntityTypes.SPRUCE_TRAPPED_CHEST.get(), WoodType.SPRUCE);
    public static final RegistryObject<Block> SPRUCE_BOOKSHELF = RegisterHelper.registerBookshelf("spruce_bookshelf");
    public static final RegistryObject<Block> SPRUCE_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("spruce_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> SPRUCE_LECTERN = RegisterHelper.registerLectern("spruce_lectern", () -> MWBlockEntityTypes.SPRUCE_LECTERN.get());
    public static final RegistryObject<Block> SPRUCE_BUSH = RegisterHelper.registerBlock("spruce_bush", () -> new TreeBushBlock(SpruceTreeGrower::new));
    public static final RegistryObject<Block> POTTED_SPRUCE_BUSH = RegisterHelper.registerFlowerPot("potted_spruce_bush", SPRUCE_BUSH);
    public static final RegistryObject<Block> HOLLOW_BIRCH_LOG = RegisterHelper.registerBlock("hollow_birch_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.BIRCH_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_BIRCH_LOG = RegisterHelper.registerBlock("hollow_stripped_birch_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_BIRCH_LOG)));
    public static final RegistryObject<Block> BIRCH_LEAVES_CARPET = RegisterHelper.registerBlock("birch_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.BIRCH_LEAVES)));
    public static final RegistryObject<Block> BIRCH_BARREL = RegisterHelper.registerBlock("birch_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> BIRCH_CHEST = RegisterHelper.registerChest("birch_chest", () -> MWBlockEntityTypes.BIRCH_CHEST.get(), WoodType.BIRCH);
    public static final RegistryObject<Block> BIRCH_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("birch_trapped_chest", () -> MWBlockEntityTypes.BIRCH_TRAPPED_CHEST.get(), WoodType.BIRCH);
    public static final RegistryObject<Block> BIRCH_BOOKSHELF = RegisterHelper.registerBookshelf("birch_bookshelf");
    public static final RegistryObject<Block> BIRCH_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("birch_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> BIRCH_LECTERN = RegisterHelper.registerLectern("birch_lectern", () -> MWBlockEntityTypes.BIRCH_LECTERN.get());
    public static final RegistryObject<Block> BIRCH_BUSH = RegisterHelper.registerBlock("birch_bush", () -> new TreeBushBlock(BirchTreeGrower::new));
    public static final RegistryObject<Block> POTTED_BIRCH_BUSH = RegisterHelper.registerFlowerPot("potted_birch_bush", BIRCH_BUSH);
    public static final RegistryObject<Block> HOLLOW_JUNGLE_LOG = RegisterHelper.registerBlock("hollow_jungle_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.JUNGLE_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_JUNGLE_LOG = RegisterHelper.registerBlock("hollow_stripped_jungle_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_JUNGLE_LOG)));
    public static final RegistryObject<Block> JUNGLE_LEAVES_CARPET = RegisterHelper.registerBlock("jungle_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.JUNGLE_LEAVES)));
    public static final RegistryObject<Block> JUNGLE_BARREL = RegisterHelper.registerBlock("jungle_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> JUNGLE_CHEST = RegisterHelper.registerChest("jungle_chest", () -> MWBlockEntityTypes.JUNGLE_CHEST.get(), WoodType.JUNGLE);
    public static final RegistryObject<Block> JUNGLE_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("jungle_trapped_chest", () -> MWBlockEntityTypes.JUNGLE_TRAPPED_CHEST.get(), WoodType.JUNGLE);
    public static final RegistryObject<Block> JUNGLE_BOOKSHELF = RegisterHelper.registerBookshelf("jungle_bookshelf");
    public static final RegistryObject<Block> JUNGLE_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("jungle_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> JUNGLE_LECTERN = RegisterHelper.registerLectern("jungle_lectern", () -> MWBlockEntityTypes.JUNGLE_LECTERN.get());
    public static final RegistryObject<Block> JUNGLE_BUSH = RegisterHelper.registerBlock("jungle_bush", () -> new TreeBushBlock(JungleTreeGrower::new));
    public static final RegistryObject<Block> POTTED_JUNGLE_BUSH = RegisterHelper.registerFlowerPot("potted_jungle_bush", JUNGLE_BUSH);
    public static final RegistryObject<Block> HOLLOW_ACACIA_LOG = RegisterHelper.registerBlock("hollow_acacia_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.ACACIA_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_ACACIA_LOG = RegisterHelper.registerBlock("hollow_stripped_acacia_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_ACACIA_LOG)));
    public static final RegistryObject<Block> ACACIA_LEAVES_CARPET = RegisterHelper.registerBlock("acacia_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.ACACIA_LEAVES)));
    public static final RegistryObject<Block> ACACIA_BARREL = RegisterHelper.registerBlock("acacia_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> ACACIA_CHEST = RegisterHelper.registerChest("acacia_chest", () -> MWBlockEntityTypes.ACACIA_CHEST.get(), WoodType.ACACIA);
    public static final RegistryObject<Block> ACACIA_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("acacia_trapped_chest", () -> MWBlockEntityTypes.ACACIA_TRAPPED_CHEST.get(), WoodType.ACACIA);
    public static final RegistryObject<Block> ACACIA_BOOKSHELF = RegisterHelper.registerBookshelf("acacia_bookshelf");
    public static final RegistryObject<Block> ACACIA_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("acacia_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> ACACIA_LECTERN = RegisterHelper.registerLectern("acacia_lectern", () -> MWBlockEntityTypes.ACACIA_LECTERN.get());
    public static final RegistryObject<Block> ACACIA_BUSH = RegisterHelper.registerBlock("acacia_bush", () -> new TreeBushBlock(AcaciaTreeGrower::new));
    public static final RegistryObject<Block> POTTED_ACACIA_BUSH = RegisterHelper.registerFlowerPot("potted_acacia_bush", ACACIA_BUSH);
    public static final RegistryObject<Block> HOLLOW_DARK_OAK_LOG = RegisterHelper.registerBlock("hollow_dark_oak_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.DARK_OAK_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_DARK_OAK_LOG = RegisterHelper.registerBlock("hollow_stripped_dark_oak_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_DARK_OAK_LOG)));
    public static final RegistryObject<Block> DARK_OAK_LEAVES_CARPET = RegisterHelper.registerBlock("dark_oak_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.DARK_OAK_LEAVES)));
    public static final RegistryObject<Block> DARK_OAK_BARREL = RegisterHelper.registerBlock("dark_oak_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> DARK_OAK_CHEST = RegisterHelper.registerChest("dark_oak_chest", () -> MWBlockEntityTypes.DARK_OAK_CHEST.get(), WoodType.DARK_OAK);
    public static final RegistryObject<Block> DARK_OAK_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("dark_oak_trapped_chest", () -> MWBlockEntityTypes.DARK_OAK_TRAPPED_CHEST.get(), WoodType.DARK_OAK);
    public static final RegistryObject<Block> DARK_OAK_BOOKSHELF = RegisterHelper.registerBookshelf("dark_oak_bookshelf");
    public static final RegistryObject<Block> DARK_OAK_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("dark_oak_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> DARK_OAK_LECTERN = RegisterHelper.registerLectern("dark_oak_lectern", () -> MWBlockEntityTypes.DARK_OAK_LECTERN.get());
    public static final RegistryObject<Block> DARK_OAK_BUSH = RegisterHelper.registerBlock("dark_oak_bush", () -> new TreeBushBlock(DarkOakTreeGrower::new));
    public static final RegistryObject<Block> POTTED_DARK_OAK_BUSH = RegisterHelper.registerFlowerPot("potted_dark_oak_bush", DARK_OAK_BUSH);
    public static final RegistryObject<Block> HOLLOW_MANGROVE_LOG = RegisterHelper.registerBlock("hollow_mangrove_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.MANGROVE_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_MANGROVE_LOG = RegisterHelper.registerBlock("hollow_stripped_mangrove_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_MANGROVE_LOG)));
    public static final RegistryObject<Block> MANGROVE_LEAVES_CARPET = RegisterHelper.registerBlock("mangrove_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.MANGROVE_LEAVES)));
    public static final RegistryObject<Block> MANGROVE_BARREL = RegisterHelper.registerBlock("mangrove_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> MANGROVE_CHEST = RegisterHelper.registerChest("mangrove_chest", () -> MWBlockEntityTypes.MANGROVE_CHEST.get(), WoodType.MANGROVE);
    public static final RegistryObject<Block> MANGROVE_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("mangrove_trapped_chest", () -> MWBlockEntityTypes.MANGROVE_TRAPPED_CHEST.get(), WoodType.MANGROVE);
    public static final RegistryObject<Block> MANGROVE_BOOKSHELF = RegisterHelper.registerBookshelf("mangrove_bookshelf");
    public static final RegistryObject<Block> MANGROVE_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("mangrove_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> MANGROVE_LECTERN = RegisterHelper.registerLectern("mangrove_lectern", () -> MWBlockEntityTypes.MANGROVE_LECTERN.get());
    public static final RegistryObject<Block> MANGROVE_BUSH = RegisterHelper.registerBlock("mangrove_bush", () -> new TreeBushBlock(() -> new MangroveTreeGrower(0.85F)));
    public static final RegistryObject<Block> POTTED_MANGROVE_BUSH = RegisterHelper.registerFlowerPot("potted_mangrove_bush", MANGROVE_BUSH);
    public static final RegistryObject<Block> HOLLOW_CHERRY_LOG = RegisterHelper.registerBlock("hollow_cherry_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.CHERRY_LOG)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_CHERRY_LOG = RegisterHelper.registerBlock("hollow_stripped_cherry_log", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_CHERRY_LOG)));
    public static final RegistryObject<Block> CHERRY_LEAVES_CARPET = RegisterHelper.registerBlock("cherry_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.CHERRY_LEAVES, FeatureFlags.UPDATE_1_20)));
    public static final RegistryObject<Block> CHERRY_BARREL = RegisterHelper.registerBlock("cherry_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL, FeatureFlags.UPDATE_1_20)));
    public static final RegistryObject<Block> CHERRY_CHEST = RegisterHelper.registerChest("cherry_chest", () -> MWBlockEntityTypes.CHERRY_CHEST.get(), WoodType.CHERRY, FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> CHERRY_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("cherry_trapped_chest", () -> MWBlockEntityTypes.CHERRY_TRAPPED_CHEST.get(), WoodType.CHERRY, FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> CHERRY_BOOKSHELF = RegisterHelper.registerBookshelf("cherry_bookshelf", FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> CHERRY_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("cherry_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF, FeatureFlags.UPDATE_1_20)));
    public static final RegistryObject<Block> CHERRY_LECTERN = RegisterHelper.registerLectern("cherry_lectern", () -> MWBlockEntityTypes.CHERRY_LECTERN.get(), FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> CHERRY_BUSH = RegisterHelper.registerBlock("cherry_bush", () -> new TreeBushBlock(CherryTreeGrower::new), FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> POTTED_CHERRY_BUSH = RegisterHelper.registerFlowerPot("potted_cherry_bush", CHERRY_BUSH, FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> HOLLOW_BAMBOO_BLOCK = RegisterHelper.registerBlock("hollow_bamboo_block", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.BAMBOO_BLOCK, FeatureFlags.UPDATE_1_20)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_BAMBOO_BLOCK = RegisterHelper.registerBlock("hollow_stripped_bamboo_block", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_BAMBOO_BLOCK, FeatureFlags.UPDATE_1_20)));
    public static final RegistryObject<Block> BAMBOO_BARREL = RegisterHelper.registerBlock("bamboo_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL, FeatureFlags.UPDATE_1_20)));
    public static final RegistryObject<Block> BAMBOO_CHEST = RegisterHelper.registerChest("bamboo_chest", () -> MWBlockEntityTypes.BAMBOO_CHEST.get(), WoodType.BAMBOO, FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> BAMBOO_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("bamboo_trapped_chest", () -> MWBlockEntityTypes.BAMBOO_TRAPPED_CHEST.get(), WoodType.BAMBOO, FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> BAMBOO_BOOKSHELF = RegisterHelper.registerBookshelf("bamboo_bookshelf", FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> BAMBOO_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("bamboo_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF, FeatureFlags.UPDATE_1_20)));
    public static final RegistryObject<Block> BAMBOO_LECTERN = RegisterHelper.registerLectern("bamboo_lectern", () -> MWBlockEntityTypes.BAMBOO_LECTERN.get(), FeatureFlags.UPDATE_1_20);
    public static final RegistryObject<Block> HOLLOW_CRIMSON_STEM = RegisterHelper.registerBlock("hollow_crimson_stem", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.CRIMSON_STEM)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_CRIMSON_STEM = RegisterHelper.registerBlock("hollow_stripped_crimson_stem", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_CRIMSON_STEM)));
    public static final RegistryObject<Block> CRIMSON_BARREL = RegisterHelper.registerBlock("crimson_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> CRIMSON_CHEST = RegisterHelper.registerChest("crimson_chest", () -> MWBlockEntityTypes.CRIMSON_CHEST.get(), WoodType.CRIMSON);
    public static final RegistryObject<Block> CRIMSON_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("crimson_trapped_chest", () -> MWBlockEntityTypes.CRIMSON_TRAPPED_CHEST.get(), WoodType.CRIMSON);
    public static final RegistryObject<Block> CRIMSON_BOOKSHELF = RegisterHelper.registerBookshelf("crimson_bookshelf");
    public static final RegistryObject<Block> CRIMSON_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("crimson_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> CRIMSON_LECTERN = RegisterHelper.registerLectern("crimson_lectern", () -> MWBlockEntityTypes.CRIMSON_LECTERN.get());
    public static final RegistryObject<Block> HOLLOW_WARPED_STEM = RegisterHelper.registerBlock("hollow_warped_stem", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.WARPED_STEM)));
    public static final RegistryObject<Block> HOLLOW_STRIPPED_WARPED_STEM = RegisterHelper.registerBlock("hollow_stripped_warped_stem", () -> new HollowBlock(PropertyHelper.copyFromBlock(Blocks.STRIPPED_WARPED_STEM)));
    public static final RegistryObject<Block> WARPED_BARREL = RegisterHelper.registerBlock("warped_barrel", () -> new BarrelBlock(PropertyHelper.copyFromBlock(Blocks.BARREL)));
    public static final RegistryObject<Block> WARPED_CHEST = RegisterHelper.registerChest("warped_chest", () -> MWBlockEntityTypes.WARPED_CHEST.get(), WoodType.WARPED);
    public static final RegistryObject<Block> WARPED_TRAPPED_CHEST = RegisterHelper.registerTrappedChest("warped_trapped_chest", () -> MWBlockEntityTypes.WARPED_TRAPPED_CHEST.get(), WoodType.WARPED);
    public static final RegistryObject<Block> WARPED_BOOKSHELF = RegisterHelper.registerBookshelf("warped_bookshelf");
    public static final RegistryObject<Block> WARPED_CHISELED_BOOKSHELF = RegisterHelper.registerBlock("warped_chiseled_bookshelf", () -> new ChiseledBookShelfBlock(PropertyHelper.copyFromBlock(Blocks.CHISELED_BOOKSHELF)));
    public static final RegistryObject<Block> WARPED_LECTERN = RegisterHelper.registerLectern("warped_lectern", () -> MWBlockEntityTypes.WARPED_LECTERN.get());
    public static final RegistryObject<Block> AZALEA_LEAVES_CARPET = RegisterHelper.registerBlock("azalea_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.AZALEA_LEAVES)));
    public static final RegistryObject<Block> FLOWERING_AZALEA_LEAVES_CARPET = RegisterHelper.registerBlock("flowering_azalea_leaves_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.FLOWERING_AZALEA_LEAVES)));
    public static final RegistryObject<Block> MANGROVE_ROOTS_CARPET = RegisterHelper.registerBlock("mangrove_roots_carpet", () -> new LeaveCarpet(PropertyHelper.copyFromBlock(Blocks.MANGROVE_ROOTS)));
    public static final RegistryObject<Block> MUDDY_MANGROVE_ROOTS_CARPET = RegisterHelper.registerBlock("muddy_mangrove_roots_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.MUDDY_MANGROVE_ROOTS)));
    public static final RegistryObject<Block> NETHER_WART_CARPET = RegisterHelper.registerBlock("nether_wart_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.NETHER_WART_BLOCK)));
    public static final RegistryObject<Block> WARPED_WART_CARPET = RegisterHelper.registerBlock("warped_wart_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.WARPED_WART_BLOCK)));
    public static final RegistryObject<Block> GRASS_CARPET = RegisterHelper.registerBlock("grass_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.GRASS_BLOCK)));
    public static final RegistryObject<Block> PODZOL_CARPET = RegisterHelper.registerBlock("podzol_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.PODZOL)));
    public static final RegistryObject<Block> MYCELIUM_CARPET = RegisterHelper.registerBlock("mycelium_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.MYCELIUM)));
    public static final RegistryObject<Block> DIRT_CARPET = RegisterHelper.registerBlock("dirt_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.DIRT)));
    public static final RegistryObject<Block> COARSE_DIRT_CARPET = RegisterHelper.registerBlock("coarse_dirt_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.COARSE_DIRT)));
    public static final RegistryObject<Block> ROOTED_DIRT_CARPET = RegisterHelper.registerBlock("rooted_dirt_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.ROOTED_DIRT)));
    public static final RegistryObject<Block> MUD_CARPET = RegisterHelper.registerBlock("mud_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.MUD)));
    public static final RegistryObject<Block> CLAY_CARPET = RegisterHelper.registerBlock("clay_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.CLAY)));
    public static final RegistryObject<Block> CRIMSON_NYLIUM_CARPET = RegisterHelper.registerBlock("crimson_nylium_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.CRIMSON_NYLIUM)));
    public static final RegistryObject<Block> WARPED_NYLIUM_CARPET = RegisterHelper.registerBlock("warped_nylium_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.WARPED_NYLIUM)));
    public static final RegistryObject<Block> GRAVEL_CARPET = RegisterHelper.registerBlock("gravel_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.GRAVEL)));
    public static final RegistryObject<Block> SAND_CARPET = RegisterHelper.registerBlock("sand_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.SAND)));
    public static final RegistryObject<Block> RED_SAND_CARPET = RegisterHelper.registerBlock("red_sand_carpet", () -> new CarpetBlock(PropertyHelper.copyFromBlock(Blocks.RED_SAND)));
    public static final RegistryObject<Block> WALL_HANGING_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(Blocks.LANTERN)));
    public static final RegistryObject<Block> WALL_HANGING_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_soul_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(Blocks.SOUL_LANTERN)));
    public static final RegistryObject<Block> WALL_HANGING_GOLDEN_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_golden_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(GOLDEN_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_GOLDEN_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_golden_soul_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(GOLDEN_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_NETHERITE_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_netherite_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(NETHERITE_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_NETHERITE_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_netherite_soul_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(NETHERITE_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_ALUMINUM_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_aluminum_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(ALUMINUM_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_ALUMINUM_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_aluminum_soul_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(ALUMINUM_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_SILVER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_silver_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(SILVER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_SILVER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_silver_soul_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(SILVER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_BRONZE_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_bronze_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(BRONZE_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_BRONZE_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_bronze_soul_lantern", () -> new WallHangingLanternBlock(PropertyHelper.copyFromBlock(BRONZE_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED, PropertyHelper.copyFromBlock(COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED,PropertyHelper.copyFromBlock(COPPER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_EXPOSED_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_exposed_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.EXPOSED, PropertyHelper.copyFromBlock(EXPOSED_COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_EXPOSED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_exposed_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.EXPOSED,PropertyHelper.copyFromBlock(EXPOSED_COPPER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WEATHERED_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_weathered_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.WEATHERED, PropertyHelper.copyFromBlock(WEATHERED_COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WEATHERED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_weathered_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.WEATHERED,PropertyHelper.copyFromBlock(WEATHERED_COPPER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_OXIDIZED_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_oxidized_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.OXIDIZED, PropertyHelper.copyFromBlock(OXIDIZED_COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_OXIDIZED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_oxidized_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.OXIDIZED,PropertyHelper.copyFromBlock(OXIDIZED_COPPER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED, PropertyHelper.copyFromBlock(WAXED_COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.UNAFFECTED,PropertyHelper.copyFromBlock(WAXED_COPPER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_EXPOSED_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_exposed_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.EXPOSED, PropertyHelper.copyFromBlock(WAXED_EXPOSED_COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_EXPOSED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_exposed_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.EXPOSED,PropertyHelper.copyFromBlock(WAXED_EXPOSED_COPPER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_WEATHERED_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_weathered_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.WEATHERED, PropertyHelper.copyFromBlock(WAXED_WEATHERED_COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_WEATHERED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_weathered_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.WEATHERED,PropertyHelper.copyFromBlock(WAXED_WEATHERED_COPPER_SOUL_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_OXIDIZED_COPPER_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_oxidized_copper_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.OXIDIZED, PropertyHelper.copyFromBlock(WAXED_OXIDIZED_COPPER_LANTERN.get())));
    public static final RegistryObject<Block> WALL_HANGING_WAXED_OXIDIZED_COPPER_SOUL_LANTERN = RegisterHelper.registerBlockWithoutBlockItem("wall_hanging_waxed_oxidized_copper_soul_lantern", () -> new WeatheringWallHangingLanternBlock(WeatheringCopper.WeatherState.OXIDIZED,PropertyHelper.copyFromBlock(WAXED_OXIDIZED_COPPER_SOUL_LANTERN.get())));

    /**
     * Register the {@link MineWorld MineWorld} {@link Block blocks}
     *
     * @param eventBus {@link IEventBus The event bus}
     */
    public static void register(final IEventBus eventBus) {
        RegisterHelper.registerBlocks(eventBus);
    }

}